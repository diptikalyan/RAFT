import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-29T09:11:04.748+05:30[Asia/Calcutta]
 * <br>
 * The generated test suite contains 16 tests
 * <br>
 * Covered targets: 32
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 42%
 * <br>
 * 
 */
public class EvoMaster_Test {

    
    private static String baseUrlOfSut = "http://localhost:50112";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/subproblem")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/subproblem"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/problem/gimNxEzK8WHzX7x")
                .then()
                .statusCode(501)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("No data with this code"))
                .body("'details'", containsString("uri=/api/problem/gimNxEzK8WHzX7x"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/problem/de1Q_nyLecn/all")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/project/K5SKhfNCiNaCEB_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"code\": \"pxVp\", " + 
                    " \"title\": \"Wee7RrQi7Mp_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/project")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"code\": \"k0aC\", " + 
                    " \"idx\": 961 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/project/k0aC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Please Check your code"))
                .body("'details'", containsString("uri=/api/project/k0aC"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/problem/E")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Please check your code"))
                .body("'details'", containsString("uri=/api/problem/E"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"code\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/project")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"c6cMfnyK1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/subproblem")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Please check your content, content must be more than 10 length"))
                .body("'details'", containsString("uri=/api/subproblem"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"idx\": 700, " + 
                    " \"problemCode\": \"E02n6\", " + 
                    " \"project\": { " + 
                    " \"code\": \"uQXHr81AnoUb\", " + 
                    " \"title\": \"9Do7Z_lx3EA\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/api/problem/AinrV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Please check your code"))
                .body("'details'", containsString("uri=/api/problem/AinrV"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/problem/0zAG/all")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Please check your code"))
                .body("'details'", containsString("uri=/api/problem/0zAG/all"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 401, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/project/NcN5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Please Check your code"))
                .body("'details'", containsString("uri=/api/project/NcN5"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 401, 403).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"content\": \"3r78XDoBwob0fjE\", " + 
                    " \"pro_idx\": 7042476840182156625 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/subproblem")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Cannot found problem with that idx"))
                .body("'details'", containsString("uri=/api/subproblem"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"idx\": 597, " + 
                    " \"problemCode\": \"BViOezpyz\", " + 
                    " \"title\": \"Ku578d\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/problem/iP6td00aTH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("No Project with that Code"))
                .body("'details'", containsString("uri=/api/problem/iP6td00aTH"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"code\": \"JsklKy\", " + 
                    " \"problem\": [ " + 
                    " { " + 
                    " \"idx\": -396799991, " + 
                    " \"problemCode\": \"\", " + 
                    " \"title\": \"0Nka92Qu\" " + 
                    " }, " + 
                    " { " + 
                    " \"title\": \"pe9c2P3KJyd10Q\" " + 
                    " }, " + 
                    " { " + 
                    " \"idx\": 175, " + 
                    " \"problemCode\": \"zckawifV\" " + 
                    " }, " + 
                    " { " + 
                    " \"idx\": 418, " + 
                    " \"problemCode\": \"_\", " + 
                    " \"title\": \"vL\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/api/project/JsklKy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("No Project with that code"))
                .body("'details'", containsString("uri=/api/project/JsklKy"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/project/bWcD_wcL")
                .then()
                .statusCode(406)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
