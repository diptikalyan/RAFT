import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2022-11-10T15:27:29.961272+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 1 tests
 * <br>
 * Covered targets: 6
 * <br>
 * Used time: 0h 0m 38s
 * <br>
 * Needed budget for current results: 73%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static String baseUrlOfSut = "https://xkcd.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/-1204579834/info.0.json")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/71/info.0.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'month'", containsString("3"))
                .body("'num'", numberMatches(71.0))
                .body("'link'", containsString(""))
                .body("'year'", containsString("2006"))
                .body("'news'", containsString(""))
                .body("'safe_title'", containsString("In the Trees"))
                .body("'transcript'", containsString("[[Man standing in forest]]\nMan: We made it so far together but then I lost you in the trees.\n[[Closer view of man]]\nMan: Finally\n{{Alt-text: It was tricky.}}"))
                .body("'alt'", containsString("It was tricky."))
                .body("'img'", containsString("https://imgs.xkcd.com/comics/in_the_trees.jpg"))
                .body("'title'", containsString("In the Trees"))
                .body("'day'", containsString("3"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/info.0.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'month'", containsString("11"))
                .body("'num'", numberMatches(2696.0))
                .body("'link'", containsString(""))
                .body("'year'", containsString("2022"))
                .body("'news'", containsString(""))
                .body("'safe_title'", containsString("Precision vs Accuracy"))
                .body("'transcript'", containsString(""))
                .body("'alt'", containsString("'Barack Obama is much less likely than the average cat to jump in and out of cardboard boxes for fun' is low precision, but I'm not sure about the accuracy."))
                .body("'img'", containsString("https://imgs.xkcd.com/comics/precision_vs_accuracy.png"))
                .body("'title'", containsString("Precision vs Accuracy"))
                .body("'day'", containsString("9"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/51/info.0.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'month'", containsString("1"))
                .body("'num'", numberMatches(51.0))
                .body("'link'", containsString(""))
                .body("'year'", containsString("2006"))
                .body("'news'", containsString(""))
                .body("'safe_title'", containsString("Malaria"))
                .body("'transcript'", containsString("[[People wearing party hat, a discarded balloon to the side]]\nWe had a malaria party, but it turned out not to be very much fun.\n{{title text: The malaria party was David's idea.}}"))
                .body("'alt'", containsString("The malaria party was David's idea"))
                .body("'img'", containsString("https://imgs.xkcd.com/comics/malaria.jpg"))
                .body("'title'", containsString("Malaria"))
                .body("'day'", containsString("18"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/info.0.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'month'", containsString("11"))
                .body("'num'", numberMatches(2696.0))
                .body("'link'", containsString(""))
                .body("'year'", containsString("2022"))
                .body("'news'", containsString(""))
                .body("'safe_title'", containsString("Precision vs Accuracy"))
                .body("'transcript'", containsString(""))
                .body("'alt'", containsString("'Barack Obama is much less likely than the average cat to jump in and out of cardboard boxes for fun' is low precision, but I'm not sure about the accuracy."))
                .body("'img'", containsString("https://imgs.xkcd.com/comics/precision_vs_accuracy.png"))
                .body("'title'", containsString("Precision vs Accuracy"))
                .body("'day'", containsString("9"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/617/info.0.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'month'", containsString("7"))
                .body("'num'", numberMatches(617.0))
                .body("'link'", containsString(""))
                .body("'year'", containsString("2009"))
                .body("'news'", containsString(""))
                .body("'safe_title'", containsString("Understocked"))
                .body("'transcript'", containsString("[[A bearded man with glasses and a police man are swearing at each other on a stoop.]]\n\n[[The bearded man is sitting behind bars.]]\n\n[[The President is standing at a podium with a fancy logo on the front.]]\nPresident: To defuse this misunderstanding, I've invited both men to have a beer with me at the white house.\n\n[[The policeman, the bearded man, and the president are in a room with a couch and an oval carpet.]]\n\n[[The president is looking in a cabinet.]]\nPresident: Actually, it seems we're out of beer.\nVoice: Is there anything else?\n\n[[The president sees a bottle of Tequila.]]\n\n[[The Presidential Limo is being driven at high speed.  The bearded man and the policeman are standing out of the sunroof.  The policeman is waving his hat and holding the bottle of tequila.]]\nAll: WOOOOOOOOOOOO\n\n[[The policeman, the bearded man, and the president are sitting behind bars.]]\n\n{{Title text: My biology grad student friends tell me that different types of alcohol don't actually have different effects. I trust their expertise, not because of the 'biology' part, but because of the 'grad student'.}}"))
                .body("'alt'", containsString("My biology grad student friends tell me that different types of alcohol don't actually have different effects. I trust their expertise, not because of the 'biology' part, but because of the 'grad student'."))
                .body("'img'", containsString("https://imgs.xkcd.com/comics/understocked.png"))
                .body("'title'", containsString("Understocked"))
                .body("'day'", containsString("31"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/info.0.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'month'", containsString("11"))
                .body("'num'", numberMatches(2696.0))
                .body("'link'", containsString(""))
                .body("'year'", containsString("2022"))
                .body("'news'", containsString(""))
                .body("'safe_title'", containsString("Precision vs Accuracy"))
                .body("'transcript'", containsString(""))
                .body("'alt'", containsString("'Barack Obama is much less likely than the average cat to jump in and out of cardboard boxes for fun' is low precision, but I'm not sure about the accuracy."))
                .body("'img'", containsString("https://imgs.xkcd.com/comics/precision_vs_accuracy.png"))
                .body("'title'", containsString("Precision vs Accuracy"))
                .body("'day'", containsString("9"));
        
    }


}
