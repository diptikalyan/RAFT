import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2022-11-08T12:30:41.989320+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 1 tests
 * <br>
 * Covered targets: 2
 * <br>
 * Used time: 0h 16m 45s
 * <br>
 * Needed budget for current results: 99%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"active\": true, " + 
                    " \"cpf\": \"H0dxNg5HqarZQrz\", " + 
                    " \"entryDate\": \"1947-03-11T08:02:11\", " + 
                    " \"location\": { " + 
                    " \"location\": {}, " + 
                    " \"name\": \"ghdNS\", " + 
                    " \"position\": { " + 
                    " \"x\": 0.29836973259846133 " + 
                    " }, " + 
                    " \"referenceId\": \"jwfM4_\" " + 
                    " }, " + 
                    " \"name\": \"G6jD\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v1/hospitais/c3zrrF_nBVh5RKoq/pacientes/7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("G6jD"))
                .body("'cpf'", containsString("H0dxNg5HqarZQrz"))
                .body("'birthDate'", nullValue())
                .body("'gender'", nullValue())
                .body("'entryDate'", containsString("2019-07-16T00:00:00.000+0000"))
                .body("'exitDate'", containsString("2019-07-16T00:00:00.000+0000"))
                .body("'active'", equalTo(false))
                .body("'location'.'name'", containsString("Ana"))
                .body("'location'.'referenceId'", containsString("R. Campo Verde, 700 - Jardim Europa, SÃ£o Paulo - SP, 04794-000"))
                .body("'location'.'locationCategory'", containsString("PATIENT"))
                .body("'location'.'position'.'x'", numberMatches(-46.694697))
                .body("'location'.'position'.'y'", numberMatches(-23.577483))
                .body("'location'.'position'.'coordinates'.size()", equalTo(2))
                .body("'location'.'position'.'coordinates'[0]", numberMatches(-46.694697))
                .body("'location'.'position'.'coordinates'[1]", numberMatches(-23.577483))
                .body("'location'.'position'.'type'", containsString("Point"))
                .body("'location'.'location'.'x'", numberMatches(-46.694697))
                .body("'location'.'location'.'y'", numberMatches(-23.577483))
                .body("'location'.'location'.'coordinates'.size()", equalTo(2))
                .body("'location'.'location'.'coordinates'[0]", numberMatches(-46.694697))
                .body("'location'.'location'.'coordinates'[1]", numberMatches(-23.577483))
                .body("'location'.'location'.'type'", containsString("Point"));
        
    }


}
