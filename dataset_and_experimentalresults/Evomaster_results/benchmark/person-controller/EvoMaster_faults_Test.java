import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2022-11-08T12:50:51.672378+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 11 tests
 * <br>
 * Covered targets: 44
 * <br>
 * Used time: 0h 16m 44s
 * <br>
 * Needed budget for current results: 89%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:50111";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/person/RTC_nZLevdcmH")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'cause'", nullValue())
                .body("'stackTrace'.size()", equalTo(53))
                .body("'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[0].'moduleName'", nullValue())
                .body("'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'stackTrace'[0].'methodName'", containsString("parseHexString"))
                .body("'stackTrace'[0].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[0].'lineNumber'", numberMatches(363.0))
                .body("'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[0].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[1].'moduleName'", nullValue())
                .body("'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'stackTrace'[1].'methodName'", containsString("<init>"))
                .body("'stackTrace'[1].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[1].'lineNumber'", numberMatches(190.0))
                .body("'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[1].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[2].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[2].'moduleName'", nullValue())
                .body("'stackTrace'[2].'moduleVersion'", nullValue())
                .body("'stackTrace'[2].'methodName'", containsString("findOne"))
                .body("'stackTrace'[2].'fileName'", containsString("MongoDBPersonRepository.java"))
                .body("'stackTrace'[2].'lineNumber'", numberMatches(85.0))
                .body("'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[2].'className'", containsString("com.mongodb.starter.repositories.MongoDBPersonRepository"))
                // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [RTC_nZLevdcmH]"))
                .body("'suppressed'.size()", equalTo(0))
                .body("'localizedMessage'", containsString("invalid hexadecimal representation of an ObjectId: [RTC_nZLevdcmH]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/persons/i9B1tSP")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'cause'", nullValue())
                .body("'stackTrace'.size()", equalTo(62))
                .body("'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[0].'moduleName'", nullValue())
                .body("'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'stackTrace'[0].'methodName'", containsString("parseHexString"))
                .body("'stackTrace'[0].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[0].'lineNumber'", numberMatches(363.0))
                .body("'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[0].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[1].'moduleName'", nullValue())
                .body("'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'stackTrace'[1].'methodName'", containsString("<init>"))
                .body("'stackTrace'[1].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[1].'lineNumber'", numberMatches(190.0))
                .body("'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[1].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[2].'classLoaderName'", nullValue())
                .body("'stackTrace'[2].'moduleName'", containsString("java.base"))
                .body("'stackTrace'[2].'moduleVersion'", containsString("15.0.2"))
                .body("'stackTrace'[2].'methodName'", containsString("accept"))
                .body("'stackTrace'[2].'fileName'", containsString("ReferencePipeline.java"))
                .body("'stackTrace'[2].'lineNumber'", numberMatches(195.0))
                .body("'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[2].'className'", containsString("java.util.stream.ReferencePipeline$3$1"))
                // Skipping assertions on the remaining 59 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [i9B1tSP]"))
                .body("'suppressed'.size()", equalTo(0))
                .body("'localizedMessage'", containsString("invalid hexadecimal representation of an ObjectId: [i9B1tSP]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/persons/1o5si")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'cause'", nullValue())
                .body("'stackTrace'.size()", equalTo(63))
                .body("'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[0].'moduleName'", nullValue())
                .body("'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'stackTrace'[0].'methodName'", containsString("parseHexString"))
                .body("'stackTrace'[0].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[0].'lineNumber'", numberMatches(363.0))
                .body("'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[0].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[1].'moduleName'", nullValue())
                .body("'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'stackTrace'[1].'methodName'", containsString("<init>"))
                .body("'stackTrace'[1].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[1].'lineNumber'", numberMatches(190.0))
                .body("'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[1].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[2].'classLoaderName'", nullValue())
                .body("'stackTrace'[2].'moduleName'", containsString("java.base"))
                .body("'stackTrace'[2].'moduleVersion'", containsString("15.0.2"))
                .body("'stackTrace'[2].'methodName'", containsString("accept"))
                .body("'stackTrace'[2].'fileName'", containsString("ReferencePipeline.java"))
                .body("'stackTrace'[2].'lineNumber'", numberMatches(195.0))
                .body("'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[2].'className'", containsString("java.util.stream.ReferencePipeline$3$1"))
                // Skipping assertions on the remaining 60 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [1o5si]"))
                .body("'suppressed'.size()", equalTo(0))
                .body("'localizedMessage'", containsString("invalid hexadecimal representation of an ObjectId: [1o5si]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 401, 403).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/persons")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'cause'.'cause'", nullValue())
                .body("'cause'.'stackTrace'.size()", equalTo(75))
                .body("'cause'.'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'cause'.'stackTrace'[0].'moduleName'", nullValue())
                .body("'cause'.'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'cause'.'stackTrace'[0].'methodName'", containsString("getCommandFailureException"))
                .body("'cause'.'stackTrace'[0].'fileName'", containsString("ProtocolHelper.java"))
                .body("'cause'.'stackTrace'[0].'lineNumber'", numberMatches(175.0))
                .body("'cause'.'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'cause'.'stackTrace'[0].'className'", containsString("com.mongodb.internal.connection.ProtocolHelper"))
                .body("'cause'.'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'cause'.'stackTrace'[1].'moduleName'", nullValue())
                .body("'cause'.'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'cause'.'stackTrace'[1].'methodName'", containsString("receiveCommandMessageResponse"))
                .body("'cause'.'stackTrace'[1].'fileName'", containsString("InternalStreamConnection.java"))
                .body("'cause'.'stackTrace'[1].'lineNumber'", numberMatches(359.0))
                .body("'cause'.'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'cause'.'stackTrace'[1].'className'", containsString("com.mongodb.internal.connection.InternalStreamConnection"))
                .body("'cause'.'stackTrace'[2].'classLoaderName'", containsString("app"))
                .body("'cause'.'stackTrace'[2].'moduleName'", nullValue())
                .body("'cause'.'stackTrace'[2].'moduleVersion'", nullValue())
                .body("'cause'.'stackTrace'[2].'methodName'", containsString("sendAndReceive"))
                .body("'cause'.'stackTrace'[2].'fileName'", containsString("InternalStreamConnection.java"))
                .body("'cause'.'stackTrace'[2].'lineNumber'", numberMatches(280.0))
                .body("'cause'.'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'cause'.'stackTrace'[2].'className'", containsString("com.mongodb.internal.connection.InternalStreamConnection"))
                // Skipping assertions on the remaining 72 elements. This limit of 3 elements can be increased in the configurations
                .body("'cause'.'code'", numberMatches(20.0))
                .body("'cause'.'errorLabels'.size()", equalTo(0))
                .body("'cause'.'serverAddress'.'host'", containsString("localhost"))
                .body("'cause'.'serverAddress'.'port'", numberMatches(27017.0))
                .body("'cause'.'serverAddress'.'socketAddresses'.size()", equalTo(2))
                .body("'cause'.'serverAddress'.'socketAddresses'", hasItems("localhost:27017", "localhost:27017"))
                .body("'cause'.'response'.'ok'.'value'", numberMatches(0.0))
                .body("'cause'.'response'.'ok'.'bsonType'", containsString("DOUBLE"))
                .body("'cause'.'response'.'ok'.'double'", equalTo(true))
                .body("'cause'.'response'.'ok'.'boolean'", equalTo(false))
                .body("'cause'.'response'.'ok'.'binary'", equalTo(false))
                .body("'cause'.'response'.'ok'.'number'", equalTo(true))
                .body("'cause'.'response'.'ok'.'decimal128'", equalTo(false))
                .body("'cause'.'response'.'ok'.'dbpointer'", equalTo(false))
                .body("'cause'.'response'.'ok'.'regularExpression'", equalTo(false))
                .body("'cause'.'response'.'ok'.'javaScript'", equalTo(false))
                .body("'cause'.'response'.'ok'.'javaScriptWithScope'", equalTo(false))
                .body("'cause'.'response'.'ok'.'document'", equalTo(false))
                .body("'cause'.'response'.'ok'.'string'", equalTo(false))
                .body("'cause'.'response'.'ok'.'int32'", equalTo(false))
                .body("'cause'.'response'.'ok'.'int64'", equalTo(false))
                .body("'cause'.'response'.'ok'.'objectId'", equalTo(false))
                .body("'cause'.'response'.'ok'.'dateTime'", equalTo(false))
                .body("'cause'.'response'.'ok'.'symbol'", equalTo(false))
                .body("'cause'.'response'.'ok'.'array'", equalTo(false))
                .body("'cause'.'response'.'ok'.'null'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'value'", containsString("Transaction numbers are only allowed on a replica set member or mongos"))
                .body("'cause'.'response'.'errmsg'.'bsonType'", containsString("STRING"))
                .body("'cause'.'response'.'errmsg'.'double'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'boolean'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'binary'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'number'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'decimal128'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'dbpointer'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'regularExpression'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'javaScript'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'javaScriptWithScope'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'document'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'string'", equalTo(true))
                .body("'cause'.'response'.'errmsg'.'int32'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'int64'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'objectId'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'dateTime'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'symbol'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'array'", equalTo(false))
                .body("'cause'.'response'.'errmsg'.'null'", equalTo(false))
                .body("'cause'.'response'.'code'.'value'", numberMatches(20.0))
                .body("'cause'.'response'.'code'.'bsonType'", containsString("INT32"))
                .body("'cause'.'response'.'code'.'double'", equalTo(false))
                .body("'cause'.'response'.'code'.'boolean'", equalTo(false))
                .body("'cause'.'response'.'code'.'binary'", equalTo(false))
                .body("'cause'.'response'.'code'.'number'", equalTo(true))
                .body("'cause'.'response'.'code'.'decimal128'", equalTo(false))
                .body("'cause'.'response'.'code'.'dbpointer'", equalTo(false))
                .body("'cause'.'response'.'code'.'regularExpression'", equalTo(false))
                .body("'cause'.'response'.'code'.'javaScript'", equalTo(false))
                .body("'cause'.'response'.'code'.'javaScriptWithScope'", equalTo(false))
                .body("'cause'.'response'.'code'.'document'", equalTo(false))
                .body("'cause'.'response'.'code'.'string'", equalTo(false))
                .body("'cause'.'response'.'code'.'int32'", equalTo(true))
                .body("'cause'.'response'.'code'.'int64'", equalTo(false))
                .body("'cause'.'response'.'code'.'objectId'", equalTo(false))
                .body("'cause'.'response'.'code'.'dateTime'", equalTo(false))
                .body("'cause'.'response'.'code'.'symbol'", equalTo(false))
                .body("'cause'.'response'.'code'.'array'", equalTo(false))
                .body("'cause'.'response'.'code'.'null'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'value'", containsString("IllegalOperation"))
                .body("'cause'.'response'.'codeName'.'bsonType'", containsString("STRING"))
                .body("'cause'.'response'.'codeName'.'double'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'boolean'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'binary'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'number'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'decimal128'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'dbpointer'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'regularExpression'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'javaScript'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'javaScriptWithScope'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'document'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'string'", equalTo(true))
                .body("'cause'.'response'.'codeName'.'int32'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'int64'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'objectId'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'dateTime'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'symbol'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'array'", equalTo(false))
                .body("'cause'.'response'.'codeName'.'null'", equalTo(false))
                .body("'cause'.'errorCodeName'", containsString("IllegalOperation"))
                .body("'cause'.'errorCode'", numberMatches(20.0))
                .body("'cause'.'errorMessage'", containsString("Transaction numbers are only allowed on a replica set member or mongos"))
                .body("'cause'.'suppressed'.size()", equalTo(0))
                .body("'stackTrace'.size()", equalTo(66))
                .body("'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[0].'moduleName'", nullValue())
                .body("'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'stackTrace'[0].'methodName'", containsString("transformWriteException"))
                .body("'stackTrace'[0].'fileName'", containsString("CommandOperationHelper.java"))
                .body("'stackTrace'[0].'lineNumber'", numberMatches(1037.0))
                .body("'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[0].'className'", containsString("com.mongodb.internal.operation.CommandOperationHelper"))
                .body("'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[1].'moduleName'", nullValue())
                .body("'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'stackTrace'[1].'methodName'", containsString("executeBulkWriteBatch"))
                .body("'stackTrace'[1].'fileName'", containsString("MixedBulkWriteOperation.java"))
                .body("'stackTrace'[1].'lineNumber'", numberMatches(284.0))
                .body("'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[1].'className'", containsString("com.mongodb.internal.operation.MixedBulkWriteOperation"))
                .body("'stackTrace'[2].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[2].'moduleName'", nullValue())
                .body("'stackTrace'[2].'moduleVersion'", nullValue())
                .body("'stackTrace'[2].'methodName'", containsString("access$700"))
                .body("'stackTrace'[2].'fileName'", containsString("MixedBulkWriteOperation.java"))
                .body("'stackTrace'[2].'lineNumber'", numberMatches(76.0))
                .body("'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[2].'className'", containsString("com.mongodb.internal.operation.MixedBulkWriteOperation"))
                // Skipping assertions on the remaining 63 elements. This limit of 3 elements can be increased in the configurations
                .body("'code'", numberMatches(-4.0))
                .body("'errorLabels'.size()", equalTo(0))
                .body("'message'", containsString("This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string."))
                .body("'suppressed'.size()", equalTo(0))
                .body("'localizedMessage'", containsString("This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string."));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 401, 403).contains(res_0.extract().statusCode()));
    }
    
    
    
    
    
    
    
    
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_8_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/persons/SswGiu0QFZ")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'cause'", nullValue())
                .body("'stackTrace'.size()", equalTo(63))
                .body("'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[0].'moduleName'", nullValue())
                .body("'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'stackTrace'[0].'methodName'", containsString("parseHexString"))
                .body("'stackTrace'[0].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[0].'lineNumber'", numberMatches(363.0))
                .body("'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[0].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[1].'moduleName'", nullValue())
                .body("'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'stackTrace'[1].'methodName'", containsString("<init>"))
                .body("'stackTrace'[1].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[1].'lineNumber'", numberMatches(190.0))
                .body("'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[1].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[2].'classLoaderName'", nullValue())
                .body("'stackTrace'[2].'moduleName'", containsString("java.base"))
                .body("'stackTrace'[2].'moduleVersion'", containsString("15.0.2"))
                .body("'stackTrace'[2].'methodName'", containsString("accept"))
                .body("'stackTrace'[2].'fileName'", containsString("ReferencePipeline.java"))
                .body("'stackTrace'[2].'lineNumber'", numberMatches(195.0))
                .body("'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[2].'className'", containsString("java.util.stream.ReferencePipeline$3$1"))
                // Skipping assertions on the remaining 60 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [SswGiu0QFZ]"))
                .body("'suppressed'.size()", equalTo(0))
                .body("'localizedMessage'", containsString("invalid hexadecimal representation of an ObjectId: [SswGiu0QFZ]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 401, 403).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .delete(baseUrlOfSut + "/api/person/NRc3GW8JcEIBc8SZ")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'cause'", nullValue())
                .body("'stackTrace'.size()", equalTo(53))
                .body("'stackTrace'[0].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[0].'moduleName'", nullValue())
                .body("'stackTrace'[0].'moduleVersion'", nullValue())
                .body("'stackTrace'[0].'methodName'", containsString("parseHexString"))
                .body("'stackTrace'[0].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[0].'lineNumber'", numberMatches(363.0))
                .body("'stackTrace'[0].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[0].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[1].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[1].'moduleName'", nullValue())
                .body("'stackTrace'[1].'moduleVersion'", nullValue())
                .body("'stackTrace'[1].'methodName'", containsString("<init>"))
                .body("'stackTrace'[1].'fileName'", containsString("ObjectId.java"))
                .body("'stackTrace'[1].'lineNumber'", numberMatches(190.0))
                .body("'stackTrace'[1].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[1].'className'", containsString("org.bson.types.ObjectId"))
                .body("'stackTrace'[2].'classLoaderName'", containsString("app"))
                .body("'stackTrace'[2].'moduleName'", nullValue())
                .body("'stackTrace'[2].'moduleVersion'", nullValue())
                .body("'stackTrace'[2].'methodName'", containsString("delete"))
                .body("'stackTrace'[2].'fileName'", containsString("MongoDBPersonRepository.java"))
                .body("'stackTrace'[2].'lineNumber'", numberMatches(95.0))
                .body("'stackTrace'[2].'nativeMethod'", equalTo(false))
                .body("'stackTrace'[2].'className'", containsString("com.mongodb.starter.repositories.MongoDBPersonRepository"))
                // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
                .body("'message'", containsString("invalid hexadecimal representation of an ObjectId: [NRc3GW8JcEIBc8SZ]"))
                .body("'suppressed'.size()", equalTo(0))
                .body("'localizedMessage'", containsString("invalid hexadecimal representation of an ObjectId: [NRc3GW8JcEIBc8SZ]"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 204, 401, 403).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/persons/count")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("71"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/persons/averageAge")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("8087715.2676056335"));
        
        expectationHandler.expect(ems);
    }


}
