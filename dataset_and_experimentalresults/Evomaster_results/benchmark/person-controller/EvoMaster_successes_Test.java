import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2022-11-08T12:50:51.700310+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 3 tests
 * <br>
 * Covered targets: 6
 * <br>
 * Used time: 0h 16m 44s
 * <br>
 * Needed budget for current results: 89%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:50111";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/persons")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(54))
                .body("[0].'firstName'", containsString("string GTA"))
                .body("[0].'lastName'", containsString("san vice"))
                .body("[0].'age'", numberMatches(0.0))
                .body("[0].'address'.'number'", numberMatches(0.0))
                .body("[0].'address'.'street'", containsString("string"))
                .body("[0].'address'.'postcode'", containsString("string"))
                .body("[0].'address'.'city'", containsString("string"))
                .body("[0].'address'.'country'", containsString("string"))
                .body("[0].'createdAt'", containsString("2022-08-29T10:04:37.390+00:00"))
                .body("[0].'insurance'", equalTo(true))
                .body("[0].'cars'.size()", equalTo(1))
                .body("[0].'cars'[0].'brand'", containsString("string"))
                .body("[0].'cars'[0].'model'", containsString("string"))
                .body("[0].'cars'[0].'maxSpeedKmH'", numberMatches(0.0))
                .body("[1].'firstName'", containsString("fuzzstring"))
                .body("[1].'lastName'", containsString("fuzzstring"))
                .body("[1].'age'", numberMatches(1.0))
                .body("[1].'address'.'number'", numberMatches(1.0))
                .body("[1].'address'.'street'", containsString("fuzzstring"))
                .body("[1].'address'.'postcode'", containsString("fuzzstring"))
                .body("[1].'address'.'city'", containsString("fuzzstring"))
                .body("[1].'address'.'country'", containsString("fuzzstring"))
                .body("[1].'createdAt'", containsString("2019-06-26T20:20:39.000+00:00"))
                .body("[1].'insurance'", equalTo(true))
                .body("[1].'cars'.size()", equalTo(1))
                .body("[1].'cars'[0].'brand'", containsString("fuzzstring"))
                .body("[1].'cars'[0].'model'", containsString("fuzzstring"))
                .body("[1].'cars'[0].'maxSpeedKmH'", numberMatches(1.23))
                .body("[2].'age'", numberMatches(0.0))
                .body("[2].'createdAt'", containsString("2022-08-29T15:15:52.030+00:00"))
                ; // Skipping assertions on the remaining 51 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": { " + 
                    " \"city\": \"T3dZexNFFCfYSf\", " + 
                    " \"number\": 694, " + 
                    " \"postcode\": \"\" " + 
                    " }, " + 
                    " \"createdAt\": \"1994-10-21T18:13:21\", " + 
                    " \"insurance\": false " + 
                    " } ")
                .put(baseUrlOfSut + "/api/person")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": { " + 
                    " \"city\": \"Di\", " + 
                    " \"country\": \"M9qRT\", " + 
                    " \"number\": 348, " + 
                    " \"street\": \"KaH\" " + 
                    " }, " + 
                    " \"age\": 592, " + 
                    " \"createdAt\": \"2087-10-24T08:12:42\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/person")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'age'", numberMatches(592.0))
                .body("'address'.'number'", numberMatches(348.0))
                .body("'address'.'street'", containsString("KaH"))
                .body("'address'.'postcode'", nullValue())
                .body("'address'.'city'", containsString("Di"))
                .body("'address'.'country'", containsString("M9qRT"))
                .body("'createdAt'", containsString("2087-10-24T08:12:42.000+00:00"));
        
    }


}
