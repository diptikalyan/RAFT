import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-25T14:42:41.617507+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 6
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 33%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static String baseUrlOfSut = "http://localhost:50117";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/products/412")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("could not prepare statement; SQL [select product0_.id as id1_7_0_, product0_.age as age2_7_0_, product0_.alcohol as alcohol3_7_0_, product0_.available as availabl4_7_0_, product0_.description as descript5_7_0_, product0_.distillery_id as distille9_7_0_, product0_.name as name6_7_0_, product0_.price as price7_7_0_, product0_.volume as volume8_7_0_, distillery1_.id as id1_5_1_, distillery1_.description as descript2_5_1_, distillery1_.region_id as region_i4_5_1_, distillery1_.title as title3_5_1_, region2_.id as id1_8_2_, region2_.color as color2_8_2_, region2_.description as descript3_8_2_, region2_.name as name4_8_2_, region2_.subtitle as subtitle5_8_2_ from product product0_ inner join distillery distillery1_ on product0_.distillery_id=distillery1_.id inner join region region2_ on distillery1_.region_id=region2_.id where product0_.id=?]; nested exception is org.hibernate.exception.SQLGrammarException: could not prepare statement"))
                .body("'description'", containsString("uri=/products/412"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Validation failed for object='userDTO'. Error count: 4"))
                .body("'errors'.size()", equalTo(4))
                .body("'errors'[0].'codes'.size()", equalTo(4))
                .body("'errors'[0].'codes'", hasItems("NotEmpty.userDTO.email", "NotEmpty.email", "NotEmpty.java.lang.String", "NotEmpty"))
                .body("'errors'[0].'arguments'.size()", equalTo(1))
                .body("'errors'[0].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[0].'arguments'[0].'codes'", hasItems("userDTO.email", "email"))
                .body("'errors'[0].'arguments'[0].'arguments'", nullValue())
                .body("'errors'[0].'arguments'[0].'defaultMessage'", containsString("email"))
                .body("'errors'[0].'arguments'[0].'code'", containsString("email"))
                .body("'errors'[0].'defaultMessage'", containsString("must not be empty"))
                .body("'errors'[0].'objectName'", containsString("userDTO"))
                .body("'errors'[0].'field'", containsString("email"))
                .body("'errors'[0].'rejectedValue'", nullValue())
                .body("'errors'[0].'bindingFailure'", equalTo(false))
                .body("'errors'[0].'code'", containsString("NotEmpty"))
                .body("'errors'[1].'codes'.size()", equalTo(4))
                .body("'errors'[1].'codes'", hasItems("NotEmpty.userDTO.address", "NotEmpty.address", "NotEmpty.java.lang.String", "NotEmpty"))
                .body("'errors'[1].'arguments'.size()", equalTo(1))
                .body("'errors'[1].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[1].'arguments'[0].'codes'", hasItems("userDTO.address", "address"))
                .body("'errors'[1].'arguments'[0].'arguments'", nullValue())
                .body("'errors'[1].'arguments'[0].'defaultMessage'", containsString("address"))
                .body("'errors'[1].'arguments'[0].'code'", containsString("address"))
                .body("'errors'[1].'defaultMessage'", containsString("must not be empty"))
                .body("'errors'[1].'objectName'", containsString("userDTO"))
                .body("'errors'[1].'field'", containsString("address"))
                .body("'errors'[1].'rejectedValue'", nullValue())
                .body("'errors'[1].'bindingFailure'", equalTo(false))
                .body("'errors'[1].'code'", containsString("NotEmpty"))
                .body("'errors'[2].'codes'.size()", equalTo(4))
                .body("'errors'[2].'codes'", hasItems("NotEmpty.userDTO.phone", "NotEmpty.phone", "NotEmpty.java.lang.String", "NotEmpty"))
                .body("'errors'[2].'arguments'.size()", equalTo(1))
                .body("'errors'[2].'arguments'[0].'codes'.size()", equalTo(2))
                .body("'errors'[2].'arguments'[0].'codes'", hasItems("userDTO.phone", "phone"))
                .body("'errors'[2].'arguments'[0].'arguments'", nullValue())
                .body("'errors'[2].'arguments'[0].'defaultMessage'", containsString("phone"))
                .body("'errors'[2].'arguments'[0].'code'", containsString("phone"))
                .body("'errors'[2].'defaultMessage'", containsString("must not be empty"))
                .body("'errors'[2].'objectName'", containsString("userDTO"))
                .body("'errors'[2].'field'", containsString("phone"))
                .body("'errors'[2].'rejectedValue'", nullValue())
                .body("'errors'[2].'bindingFailure'", equalTo(false))
                .body("'errors'[2].'code'", containsString("NotEmpty"))
                // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
                .body("'path'", containsString("/register"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
