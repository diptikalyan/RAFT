import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-10T14:32:03.449940700+05:30[Asia/Calcutta]
 * <br>
 * The generated test suite contains 3 tests
 * <br>
 * Covered targets: 7
 * <br>
 * Used time: 0h 1m 2s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "https://petstore.swagger.io";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/login?" + 
                    "username=xi6EU5e&" + 
                    "password=hivN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 375, " + 
                    " \"username\": \"d_DZIuQQPnMu4pz\", " + 
                    " \"firstName\": \"i_ApbL5874t4\", " + 
                    " \"lastName\": \"q1WgtwohVzNwM7AV\", " + 
                    " \"password\": \"zQ59_ep6bQdsDN\", " + 
                    " \"phone\": \"hgSHpHb3KZ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/user/d_DZIuQQPnMu4pz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("375"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/login?" + 
                    "username=UVwSnGXWi&" + 
                    "password=zgW5BJhF7vjsC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }


}
