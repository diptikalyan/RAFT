import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-10T14:32:03.422208200+05:30[Asia/Calcutta]
 * <br>
 * The generated test suite contains 4 tests
 * <br>
 * Covered targets: 36
 * <br>
 * Used time: 0h 1m 2s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "https://petstore.swagger.io";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("name=8OyLgZOBBx1zwh")
                .post(baseUrlOfSut + "/v2/pet/944106126")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("not found"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 220, " + 
                    " \"petId\": -326338262, " + 
                    " \"quantity\": 969, " + 
                    " \"shipDate\": \"2068-06-18T23:34:41\", " + 
                    " \"status\": \"delivered\", " + 
                    " \"complete\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(-3.26338262E8))
                .body("'quantity'", numberMatches(969.0))
                .body("'shipDate'", containsString("2068-06-18T23:34:41.000+0000"))
                .body("'status'", containsString("delivered"))
                .body("'complete'", equalTo(false));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 210, " + 
                    " \"username\": \"rTG2GV\", " + 
                    " \"firstName\": \"an0zaDHS0\", " + 
                    " \"email\": \"znwehBUML\", " + 
                    " \"password\": \"tX53Tqs6Af\", " + 
                    " \"userStatus\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 530, " + 
                    " \"username\": \"q3EYhxRSuE\", " + 
                    " \"firstName\": \"RNGXmGBMNojaYx0p\", " + 
                    " \"lastName\": \"0F\", " + 
                    " \"email\": \"1WRT5\", " + 
                    " \"password\": \"Zg4rOM6YO\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 940, " + 
                    " \"username\": \"mM9e\", " + 
                    " \"firstName\": \"dycnffTiyoFIA\", " + 
                    " \"userStatus\": \"EVOMASTER\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("something bad happened"));
        
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("javax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"body\"). Expected elements are <{}Category>,<{}Pet>,<{}Tag>"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/inventory")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'sold'", numberMatches(9.0))
                .body("'EVOMASTER'", numberMatches(4.0))
                .body("'string'", numberMatches(722.0))
                .body("'pending'", numberMatches(14.0))
                .body("'available'", numberMatches(211.0))
                .body("'not available'", numberMatches(1.0))
                .body("'987#@'", numberMatches(4.0))
                .body("'peric'", numberMatches(4.0));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/p8kReteg")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/pet/548")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 1496329202, " + 
                    " \"username\": \"evmPW2GYm\", " + 
                    " \"firstName\": \"5kwc5GCmnB4vNnE\", " + 
                    " \"lastName\": \"DUDFL_l\", " + 
                    " \"password\": \"3n\", " + 
                    " \"phone\": \"uS4_8L7E23SY7\", " + 
                    " \"userStatus\": \"EVOMASTER\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("something bad happened"));
        
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByStatus?status=pending&status=sold&status=sold&status=sold")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(14))
                .body("[0].'category'.'name'", containsString("ullamco pariatur qui"))
                .body("[0].'name'", containsString("doggie"))
                .body("[0].'photoUrls'.size()", equalTo(2))
                .body("[0].'photoUrls'", hasItems("incididunt adipisicing", "do Excepteur dolor"))
                .body("[0].'tags'.size()", equalTo(2))
                .body("[0].'tags'[0].'name'", containsString("dolor in deserunt "))
                .body("[0].'tags'[1].'name'", containsString("laborum nisi consequat magna"))
                .body("[0].'status'", containsString("pending"))
                .body("[1].'category'.'name'", containsString("eu qui"))
                .body("[1].'name'", containsString("doggie"))
                .body("[1].'photoUrls'.size()", equalTo(2))
                .body("[1].'photoUrls'", hasItems("deserunt nostrud pariatur do", "exercitation"))
                .body("[1].'tags'.size()", equalTo(2))
                .body("[1].'tags'[0].'name'", containsString("officia amet aute"))
                .body("[1].'tags'[1].'name'", containsString("in in voluptate dolore fugiat"))
                .body("[1].'status'", containsString("pending"))
                .body("[2].'category'.'name'", containsString("nulla occaecat eiusmod cupidatat mollit"))
                .body("[2].'name'", containsString("doggie"))
                .body("[2].'photoUrls'.size()", equalTo(2))
                .body("[2].'photoUrls'", hasItems("fugiat dolor est reprehenderit", "ipsum magna ea nisi"))
                .body("[2].'tags'.size()", equalTo(2))
                .body("[2].'tags'[0].'name'", containsString("consequat ex"))
                .body("[2].'tags'[1].'name'", containsString("et eu anim ut"))
                .body("[2].'status'", containsString("pending"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/order/339")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Order not found"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 753, " + 
                    " \"username\": \"p\", " + 
                    " \"firstName\": \"p_a\", " + 
                    " \"email\": \"PKJBW67T_z\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -7546975346758256709, " + 
                    " \"username\": \"MXgSih\", " + 
                    " \"firstName\": \"YTOYV2C\", " + 
                    " \"email\": \"1WGyc\", " + 
                    " \"userStatus\": \"0\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/store/order/3511396874615234895")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("Order Not Found"));
        
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("additionalMetadata=YVOGR0TZOE&file=vTmK")
                .post(baseUrlOfSut + "/v2/pet/351/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'type'", containsString("unknown"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 278, " + 
                    " \"username\": \"Eedwc\", " + 
                    " \"firstName\": \"is6OrGwVaVP\", " + 
                    " \"lastName\": \"uzsIJ0KRHDbEcD\", " + 
                    " \"phone\": \"VRsi9ZRwOUEPdcg\", " + 
                    " \"userStatus\": \"EVOMASTER\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": -114646651, " + 
                    " \"username\": \"Bzr8vYw\", " + 
                    " \"firstName\": \"7g99XJ6gfnYWm\", " + 
                    " \"email\": \"qEonjM\", " + 
                    " \"password\": \"TgIXC3A\", " + 
                    " \"phone\": \"fl3T_yILS5LlX8\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("something bad happened"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    */
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 52, " + 
                    " \"username\": \"Fr\", " + 
                    " \"firstName\": \"WcTWKpai5fKdbJ\", " + 
                    " \"lastName\": \"Y_ZTEdTHqdBRt\", " + 
                    " \"email\": \"QrR2dfcvpNcxMwHN\", " + 
                    " \"password\": \"M_b2Py_2GbTd_\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 388, " + 
                    " \"username\": \"W6ECkAYtlVFoc\", " + 
                    " \"firstName\": \"Gx3_UfAnvW3HNP\", " + 
                    " \"lastName\": \"iBxV6mWrQ\", " + 
                    " \"password\": \"arRQUsdrerWx\", " + 
                    " \"userStatus\": \"0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("388"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/login?" + 
                    "username=EKdfz5ujZRAA&" + 
                    "password=AOBgcgMdN0xM8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/store/order/732")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("Order Not Found"));
        
        
        ValidatableResponse res_5 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 4565501481526991953, " + 
                    " \"username\": \"NnDh\", " + 
                    " \"firstName\": \"ixYs2Up5f1\", " + 
                    " \"userStatus\": \"EVOMASTER\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/user/NnDh")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("something bad happened"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 783, " + 
                    " \"petId\": 429, " + 
                    " \"quantity\": 15, " + 
                    " \"shipDate\": \"1948-03-07T02:19:35\", " + 
                    " \"status\": \"delivered\", " + 
                    " \"complete\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(429.0))
                .body("'quantity'", numberMatches(15.0))
                .body("'shipDate'", containsString("1948-03-07T02:19:35.000+0000"))
                .body("'status'", containsString("delivered"))
                .body("'complete'", equalTo(true));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 886416728, " + 
                    " \"username\": \"K5C\", " + 
                    " \"firstName\": \"RqkKyyG\", " + 
                    " \"lastName\": \"EN\", " + 
                    " \"email\": \"NDTQqjQkjwSp\", " + 
                    " \"password\": \"tFakX7\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("886416728"));
        
    }


}
