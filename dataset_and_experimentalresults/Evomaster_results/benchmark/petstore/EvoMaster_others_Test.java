import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-10T14:32:03.452947700+05:30[Asia/Calcutta]
 * <br>
 * The generated test suite contains 8 tests
 * <br>
 * Covered targets: 36
 * <br>
 * Used time: 0h 1m 2s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "https://petstore.swagger.io";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/wHR")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"category\": { " + 
                    " \"id\": 395, " + 
                    " \"name\": \"jfs6X\" " + 
                    " }, " + 
                    " \"name\": \"qFA0Ht7\", " + 
                    " \"photoUrls\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'category'.'name'", containsString("jfs6X"))
                .body("'name'", containsString("qFA0Ht7"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/Op326kAOX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByStatus?status=EVOMASTER&status=available&status=EVOMASTER&status=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("1kvX"))
                .body("[0].'photoUrls'.size()", equalTo(0))
                .body("[0].'tags'.size()", equalTo(5))
                .body("[0].'tags'[0].'name'", containsString("c"))
                .body("[0].'tags'[1].'name'", containsString("r69Uw7Lx2Jr0TbPv"))
                .body("[0].'tags'[2].'name'", containsString("lKeTyr42"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'status'", containsString("EVOMASTER"))
                .body("[1].'name'", containsString("NNZ"))
                .body("[1].'photoUrls'.size()", equalTo(0))
                .body("[1].'tags'.size()", equalTo(0))
                .body("[1].'status'", containsString("EVOMASTER"))
                .body("[2].'category'.'name'", containsString("HNsobrQL"))
                .body("[2].'name'", containsString("EZ8GK"))
                .body("[2].'photoUrls'.size()", equalTo(5))
                .body("[2].'photoUrls'", hasItems("kICrozgzsc", "aTT3uht0JChZJ_r", "pwRF6S8tvsuwnN_", "7vMN2e3", "A3uk"))
                .body("[2].'tags'.size()", equalTo(3))
                .body("[2].'tags'[0].'name'", containsString("B"))
                .body("[2].'status'", containsString("EVOMASTER"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/276")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 325, " + 
                    " \"name\": \"vG\", " + 
                    " \"photoUrls\": [ " + 
                    " \"8C84RN7ts\", " + 
                    " \"HY6tSOQ\", " + 
                    " \"OnE84iKFrnSdx\", " + 
                    " \"Y2iE7\" " + 
                    " ], " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 930 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 429 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 476, " + 
                    " \"name\": \"nPyWzd90sAkRkZq\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("vG"))
                .body("'photoUrls'.size()", equalTo(4))
                .body("'photoUrls'", hasItems("8C84RN7ts", "HY6tSOQ", "OnE84iKFrnSdx", "Y2iE7"))
                .body("'tags'.size()", equalTo(3))
                .body("'tags'[2].'name'", containsString("nPyWzd90sAkRkZq"));
        
        
        given().accept("*/*")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("javax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"body\"). Expected elements are <{}Category>,<{}Pet>,<{}Tag>"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/login?" + 
                    "username=ymAvYU5&" + 
                    "password=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 487978201, " + 
                    " \"username\": \"DeZxd2PY\", " + 
                    " \"firstName\": \"KlWH25tbg63p5y\", " + 
                    " \"password\": \"Jgr1VLMnDDudmv\", " + 
                    " \"phone\": \"8jZFW6y7FYPeAyKY\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/user/DeZxd2PY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("487978201"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404).contains(res_0.extract().statusCode()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/inventory")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'sold'", numberMatches(10.0))
                .body("'EVOMASTER'", numberMatches(3.0))
                .body("'string'", numberMatches(728.0))
                .body("'pending'", numberMatches(12.0))
                .body("'available'", numberMatches(211.0))
                .body("'not available'", numberMatches(1.0))
                .body("'987#@'", numberMatches(4.0))
                .body("'peric'", numberMatches(4.0));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/839567815")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
        
        ValidatableResponse res_3 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/inventory")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'sold'", numberMatches(10.0))
                .body("'EVOMASTER'", numberMatches(3.0))
                .body("'string'", numberMatches(728.0))
                .body("'pending'", numberMatches(12.0))
                .body("'available'", numberMatches(211.0))
                .body("'not available'", numberMatches(1.0))
                .body("'987#@'", numberMatches(4.0))
                .body("'peric'", numberMatches(4.0));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByTags?tags=XVVfnXNO&tags=v_5DWRtN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/order/291")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Order not found"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByStatus?status=sold&status=sold&status=sold&status=available&status=available")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("[0].'category'.'name'", containsString("irure laborum id proident incididunt"))
                .body("[0].'name'", containsString("doggie"))
                .body("[0].'photoUrls'.size()", equalTo(2))
                .body("[0].'photoUrls'", hasItems("dolore ipsum qui", "fugiat non eiusmod Duis nisi"))
                .body("[0].'tags'.size()", equalTo(2))
                .body("[0].'tags'[0].'name'", containsString("nisi"))
                .body("[0].'tags'[1].'name'", containsString("ut sint enim cillum nisi"))
                .body("[0].'status'", containsString("sold"))
                .body("[1].'category'.'name'", containsString("cats"))
                .body("[1].'name'", containsString("King Kong"))
                .body("[1].'photoUrls'.size()", equalTo(1))
                .body("[1].'photoUrls'", hasItems("string"))
                .body("[1].'tags'.size()", equalTo(1))
                .body("[1].'tags'[0].'name'", containsString("string"))
                .body("[1].'status'", containsString("sold"))
                .body("[2].'category'.'name'", containsString("string"))
                .body("[2].'name'", containsString("doggie"))
                .body("[2].'photoUrls'.size()", equalTo(1))
                .body("[2].'photoUrls'", hasItems("string"))
                .body("[2].'tags'.size()", equalTo(1))
                .body("[2].'tags'[0].'name'", containsString("string"))
                .body("[2].'status'", containsString("sold"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/v2/pet/-1571675690")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("not found"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_4.extract().statusCode()));
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": -2000401892, " + 
                    " \"username\": \"gP0CnJaEs\", " + 
                    " \"firstName\": \"D1f\", " + 
                    " \"lastName\": \"YswRHhvAzq3\", " + 
                    " \"email\": \"ldp\", " + 
                    " \"userStatus\": \"0\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/login?" + 
                    "username=MImWvJ&" + 
                    "password=gUX4vxoppZq0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("file=exSr1Ta2tkSN4")
                .post(baseUrlOfSut + "/v2/pet/722/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'type'", containsString("unknown"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/inventory")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'sold'", numberMatches(10.0))
                .body("'EVOMASTER'", numberMatches(3.0))
                .body("'string'", numberMatches(732.0))
                .body("'pending'", numberMatches(10.0))
                .body("'available'", numberMatches(210.0))
                .body("'not available'", numberMatches(1.0))
                .body("'987#@'", numberMatches(4.0))
                .body("'peric'", numberMatches(4.0));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/280")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 629, " + 
                    " \"username\": \"YBuOJH2Kfty\", " + 
                    " \"firstName\": \"rO6f7Yuyc1E52\", " + 
                    " \"lastName\": \"Os\", " + 
                    " \"email\": \"Zx8o\", " + 
                    " \"password\": \"kKAwrxTXIycAduCN\", " + 
                    " \"phone\": \"VN\", " + 
                    " \"userStatus\": \"0\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 3080365886201117277, " + 
                    " \"category\": { " + 
                    " \"id\": 231 " + 
                    " }, " + 
                    " \"name\": \"Gpw_2KxnV2\", " + 
                    " \"photoUrls\": [ " + 
                    " \"J6oW\", " + 
                    " \"Q13gSa5UUH\", " + 
                    " \"jj6hKkbpsF8\", " + 
                    " \"yteDVbMlvOU3P6\", " + 
                    " \"n_sZ\" " + 
                    " ], " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": -1311044052, " + 
                    " \"name\": \"Z1S7F\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": 755 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"\" " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Gpw_2KxnV2"))
                .body("'photoUrls'.size()", equalTo(5))
                .body("'photoUrls'", hasItems("J6oW", "Q13gSa5UUH", "jj6hKkbpsF8", "yteDVbMlvOU3P6", "n_sZ"))
                .body("'tags'.size()", equalTo(5))
                .body("'tags'[0].'name'", containsString("Z1S7F"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/HpCsAavdTJFwNXYD")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByStatus?status=EVOMASTER&status=pending&status=pending&status=EVOMASTER")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'name'", containsString("1kvX"))
                .body("[0].'photoUrls'.size()", equalTo(0))
                .body("[0].'tags'.size()", equalTo(5))
                .body("[0].'tags'[0].'name'", containsString("c"))
                .body("[0].'tags'[1].'name'", containsString("r69Uw7Lx2Jr0TbPv"))
                .body("[0].'tags'[2].'name'", containsString("lKeTyr42"))
                // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
                .body("[0].'status'", containsString("EVOMASTER"))
                .body("[1].'name'", containsString("NNZ"))
                .body("[1].'photoUrls'.size()", equalTo(0))
                .body("[1].'tags'.size()", equalTo(0))
                .body("[1].'status'", containsString("EVOMASTER"))
                .body("[2].'category'.'name'", containsString("HNsobrQL"))
                .body("[2].'name'", containsString("EZ8GK"))
                .body("[2].'photoUrls'.size()", equalTo(5))
                .body("[2].'photoUrls'", hasItems("kICrozgzsc", "aTT3uht0JChZJ_r", "pwRF6S8tvsuwnN_", "7vMN2e3", "A3uk"))
                .body("[2].'tags'.size()", equalTo(3))
                .body("[2].'tags'[0].'name'", containsString("B"))
                .body("[2].'status'", containsString("EVOMASTER"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 900, " + 
                    " \"username\": \"vd4pFIw4krg\", " + 
                    " \"firstName\": \"6gqjkdPF_\", " + 
                    " \"email\": \"3ByCSVVVQ\", " + 
                    " \"password\": \"qG6P2W\", " + 
                    " \"phone\": \"4U\", " + 
                    " \"userStatus\": \"0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("900"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/order/390")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Order not found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/user/QBRFYQ32UwI")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/user/3cuaQBr96E8_qFM")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 204, " + 
                    " \"username\": \"lfNns9OyPqzK\", " + 
                    " \"firstName\": \"QUB7fcoyLuYOxh\", " + 
                    " \"lastName\": \"DgFZEmQWp\", " + 
                    " \"userStatus\": \"0\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"fJxZyw9C06zf9rA\", " + 
                    " \"photoUrls\": [ " + 
                    " \"15w\", " + 
                    " \"P\", " + 
                    " \"KiYuOSO5ZsIk5\", " + 
                    " \"9CXpgmeQtf\", " + 
                    " \"kPxQzbrQ\" " + 
                    " ], " + 
                    " \"status\": \"EVOMASTER\" " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fJxZyw9C06zf9rA"))
                .body("'photoUrls'.size()", equalTo(5))
                .body("'photoUrls'", hasItems("15w", "P", "KiYuOSO5ZsIk5", "9CXpgmeQtf", "kPxQzbrQ"))
                .body("'tags'.size()", equalTo(0))
                .body("'status'", containsString("EVOMASTER"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("additionalMetadata=t18J5MIQxGO&file=qme3AD")
                .post(baseUrlOfSut + "/v2/pet/133/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'type'", containsString("unknown"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_4.extract().statusCode()));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 218, " + 
                    " \"petId\": 12, " + 
                    " \"quantity\": 486403419, " + 
                    " \"shipDate\": \"1967-05-22T18:45:56\", " + 
                    " \"status\": \"EVOMASTER\", " + 
                    " \"complete\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(12.0))
                .body("'quantity'", numberMatches(4.86403419E8))
                .body("'shipDate'", containsString("1967-05-22T18:45:56.000+0000"))
                .body("'status'", containsString("EVOMASTER"))
                .body("'complete'", equalTo(true));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByTags?tags=W")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_7 = given().accept("application/json")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("javax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"body\"). Expected elements are <{}Category>,<{}Pet>,<{}Tag>"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 405).contains(res_7.extract().statusCode()));
    }


}
