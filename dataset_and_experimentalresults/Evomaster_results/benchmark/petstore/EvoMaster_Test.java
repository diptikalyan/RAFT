import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-10T14:27:01.191063100+05:30[Asia/Calcutta]
 * <br>
 * The generated test suite contains 20 tests
 * <br>
 * Covered targets: 49
 * <br>
 * Used time: 0h 1m 1s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * 
 */
public class EvoMaster_Test {

    
    private static String baseUrlOfSut = "https://petstore.swagger.io";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByTags?tags=rhw1uyFKNgkqO3CW&tags=k60j_8rOHqlk")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/v2/pet/-8654452996095335882/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'type'", containsString("unknown"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 977, " + 
                    " \"quantity\": 303, " + 
                    " \"shipDate\": \"1955-08-02T-1:24:36\", " + 
                    " \"status\": \"approved\", " + 
                    " \"complete\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("something bad happened"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 400).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/956")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
        
        given().accept("*/*")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("javax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"body\"). Expected elements are <{}Category>,<{}Pet>,<{}Tag>"));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": -6080652871724226868, " + 
                    " \"quantity\": 142, " + 
                    " \"complete\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(0.0))
                .body("'quantity'", numberMatches(142.0))
                .body("'complete'", equalTo(false));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/user/MqXNEoQ_uAfM")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 422, " + 
                    " \"firstName\": \"cay_UeIFeP9FY\", " + 
                    " \"lastName\": \"IEtIixvZMrO\", " + 
                    " \"password\": \"HkttvuBI2j\", " + 
                    " \"phone\": \"\", " + 
                    " \"userStatus\": 707 " + 
                    " }, " + 
                    " { " + 
                    " \"firstName\": \"dSD0bxgxX8QDy_\", " + 
                    " \"password\": \"l4QkdRKTew2sj\", " + 
                    " \"phone\": \"LosJdY_LNxCPax5\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 881, " + 
                    " \"username\": \"o\", " + 
                    " \"firstName\": \"XT\", " + 
                    " \"password\": \"yVVItDVcHLb2\", " + 
                    " \"phone\": \"1MpbNKYhN1\", " + 
                    " \"userStatus\": 54 " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("881"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"quantity\": 278, " + 
                    " \"status\": \"approved\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(0.0))
                .body("'quantity'", numberMatches(278.0))
                .body("'status'", containsString("approved"))
                .body("'complete'", equalTo(false));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/gDEUzGdaqwa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"category\": { " + 
                    " \"id\": 44 " + 
                    " }, " + 
                    " \"name\": \"JS9_ZPRbvB\", " + 
                    " \"photoUrls\": [ " + 
                    " \"q8I20w\", " + 
                    " \"w4UKB\", " + 
                    " \"l7vZQfSYFtg\", " + 
                    " \"WRaOMW\" " + 
                    " ], " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 816, " + 
                    " \"name\": \"DDhq2E\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"hx\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 310 " + 
                    " }, " + 
                    " {} " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("JS9_ZPRbvB"))
                .body("'photoUrls'.size()", equalTo(4))
                .body("'photoUrls'", hasItems("q8I20w", "w4UKB", "l7vZQfSYFtg", "WRaOMW"))
                .body("'tags'.size()", equalTo(4))
                .body("'tags'[0].'name'", containsString("DDhq2E"))
                .body("'tags'[1].'name'", containsString("hx"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 932, " + 
                    " \"username\": \"ffiFME_2SYEM\", " + 
                    " \"phone\": \"JvHE\", " + 
                    " \"userStatus\": 613 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 816, " + 
                    " \"username\": \"D\", " + 
                    " \"firstName\": \"QrwaoM0X_TaN2n\", " + 
                    " \"email\": \"Fc5O\", " + 
                    " \"password\": \"KyKSYaEso\" " + 
                    " }, " + 
                    " { " + 
                    " \"lastName\": \"Pcv45E_U9ZQlmH\", " + 
                    " \"phone\": \"eZm\", " + 
                    " \"userStatus\": 838 " + 
                    " }, " + 
                    " { " + 
                    " \"firstName\": \"KFMHIyqb9\", " + 
                    " \"userStatus\": -750821586 " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("api_key", "ML")
                .delete(baseUrlOfSut + "/v2/pet/491")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByTags?tags=CHZFpXdg_hYWNu&tags=&tags=81BKOfHZ28VpD7Hm&tags=VhFL6H1oM5YgjJ3B")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/HKwM1ePwtP78H")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/709")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/hr79sblEc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("User not found"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/inventory")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'sold'", numberMatches(6.0))
                .body("'EVOMASTER'", numberMatches(2.0))
                .body("'string'", numberMatches(728.0))
                .body("'pending'", numberMatches(9.0))
                .body("'available'", numberMatches(224.0))
                .body("'not available'", numberMatches(1.0))
                .body("'987#@'", numberMatches(4.0))
                .body("'peric'", numberMatches(5.0));
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/206")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 368, " + 
                    " \"username\": \"IqP94Fn\", " + 
                    " \"firstName\": \"Ki1RccEi\", " + 
                    " \"lastName\": \"o4xkqrSq\", " + 
                    " \"phone\": \"tB_AM82\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 1517298898938292557, " + 
                    " \"firstName\": \"CKkzm\", " + 
                    " \"password\": \"UHytPpQHyLUuYwM\", " + 
                    " \"phone\": \"HU\", " + 
                    " \"userStatus\": 954 " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/order/70")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Order not found"));
        
        
        given().accept("*/*")
                .header("api_key", "nJoUNS19N")
                .delete(baseUrlOfSut + "/v2/pet/907")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 788, " + 
                    " \"username\": \"uM7xhR0dySwjovk\", " + 
                    " \"lastName\": \"OcxqzCt\", " + 
                    " \"email\": \"aX4gWWPFnQ0\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 523, " + 
                    " \"username\": \"abPQxehc\", " + 
                    " \"password\": \"r0rLdDy8A52xeM\", " + 
                    " \"phone\": \"\", " + 
                    " \"userStatus\": 308 " + 
                    " }, " + 
                    " { " + 
                    " \"lastName\": \"P0\", " + 
                    " \"email\": \"9Gno2fsHAe\", " + 
                    " \"password\": \"dgS7ekz\" " + 
                    " }, " + 
                    " { " + 
                    " \"username\": \"8pg6QO8I\", " + 
                    " \"lastName\": \"Bj\", " + 
                    " \"email\": \"9Njchv6wWb\", " + 
                    " \"phone\": \"z6hlTuUo\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("name=KJKEhx")
                .post(baseUrlOfSut + "/v2/pet/-2141320835")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("not found"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_4.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("api_key", "Alx9vGZAgRk_2")
                .delete(baseUrlOfSut + "/v2/pet/513")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/user/PSjsT")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"category\": { " + 
                    " \"id\": 306 " + 
                    " }, " + 
                    " \"name\": \"d90oWUUwZT_9PKrX\", " + 
                    " \"photoUrls\": [ " + 
                    " \"inBM\", " + 
                    " \"KAcn0\", " + 
                    " \"I6Pyn4oA7Lhg\", " + 
                    " \"\" " + 
                    " ], " + 
                    " \"tags\": [ " + 
                    " { " + 
                    " \"id\": 449 " + 
                    " } " + 
                    " ], " + 
                    " \"status\": \"sold\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("d90oWUUwZT_9PKrX"))
                .body("'photoUrls'.size()", equalTo(4))
                .body("'photoUrls'", hasItems("inBM", "KAcn0", "I6Pyn4oA7Lhg", ""))
                .body("'tags'.size()", equalTo(1))
                .body("'status'", containsString("sold"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_2.extract().statusCode()));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .contentType("application/xml")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("javax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"body\"). Expected elements are <{}Category>,<{}Pet>,<{}Tag>"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("api_key", "")
                .delete(baseUrlOfSut + "/v2/pet/53")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/order/943")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Order not found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"H\", " + 
                    " \"phone\": \"QMSs\", " + 
                    " \"userStatus\": 597 " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("0"));
        
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"petId\": -1423036024272741313, " + 
                    " \"complete\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(-1.42303602427274138E18))
                .body("'quantity'", numberMatches(0.0))
                .body("'complete'", equalTo(false));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"petId\": 330, " + 
                    " \"shipDate\": \"1923-00-00T25:57:15\", " + 
                    " \"status\": \"placed\", " + 
                    " \"complete\": true " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/store/order")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'petId'", numberMatches(330.0))
                .body("'quantity'", numberMatches(0.0))
                .body("'shipDate'", containsString("1922-12-01T01:57:15.000+0000"))
                .body("'status'", containsString("placed"))
                .body("'complete'", equalTo(true));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 650, " + 
                    " \"lastName\": \"WKOLPE\", " + 
                    " \"email\": \"fV1cPWSoZY2gNos\", " + 
                    " \"password\": \"Gi_S\", " + 
                    " \"phone\": \"MCXv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("650"));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/v2/pet/622/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'type'", containsString("unknown"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 920, " + 
                    " \"category\": {}, " + 
                    " \"name\": \"\", " + 
                    " \"photoUrls\": [ " + 
                    " \"0DP3W\", " + 
                    " \"Mlbi0\", " + 
                    " \"ybj3t_L\" " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString(""))
                .body("'photoUrls'.size()", equalTo(3))
                .body("'photoUrls'", hasItems("0DP3W", "Mlbi0", "ybj3t_L"))
                .body("'tags'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405).contains(res_3.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/user/logout")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"username\": \"6sA8Ce9\", " + 
                    " \"firstName\": \"Dd09Wr46\", " + 
                    " \"userStatus\": 1909952243 " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/user")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("9223372036854746440"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/pet/131")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("131"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 9108698858087670868, " + 
                    " \"username\": \"4e\", " + 
                    " \"phone\": \"DN\", " + 
                    " \"userStatus\": 443 " + 
                    " } ")
                .put(baseUrlOfSut + "/v2/user/4e")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("9108698858087670868"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/user/oHiWJp")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 528, " + 
                    " \"username\": \"\", " + 
                    " \"firstName\": \"xScXLe\", " + 
                    " \"email\": \"\", " + 
                    " \"userStatus\": 634 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 308, " + 
                    " \"username\": \"IXhObYJ0\", " + 
                    " \"email\": \"VZ9J8thrW335S\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByStatus?status=available&status=sold&status=pending&status=sold&status=sold")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(222))
                .body("[0].'category'.'name'", containsString("string"))
                .body("[0].'name'", containsString("test"))
                .body("[0].'photoUrls'.size()", equalTo(1))
                .body("[0].'photoUrls'", hasItems("string"))
                .body("[0].'tags'.size()", equalTo(1))
                .body("[0].'tags'[0].'name'", containsString("string"))
                .body("[0].'status'", containsString("available"))
                .body("[1].'category'.'name'", containsString("string"))
                .body("[1].'name'", containsString("doggie"))
                .body("[1].'photoUrls'.size()", equalTo(1))
                .body("[1].'photoUrls'", hasItems("string"))
                .body("[1].'tags'.size()", equalTo(1))
                .body("[1].'tags'[0].'name'", containsString("string"))
                .body("[1].'status'", containsString("available"))
                .body("[2].'category'.'name'", containsString("string"))
                .body("[2].'name'", containsString("fish"))
                .body("[2].'photoUrls'.size()", equalTo(1))
                .body("[2].'photoUrls'", hasItems("string"))
                .body("[2].'tags'.size()", equalTo(1))
                .body("[2].'tags'[0].'name'", containsString("string"))
                .body("[2].'status'", containsString("available"))
                ; // Skipping assertions on the remaining 219 elements. This limit of 3 elements can be increased in the configurations
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 455, " + 
                    " \"name\": \"CRhVQwum2\", " + 
                    " \"photoUrls\": [ " + 
                    " \"MUHPq\", " + 
                    " \"2\", " + 
                    " \"mP\", " + 
                    " \"\", " + 
                    " \"fF7NnKAgKWR16UIm\" " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("CRhVQwum2"))
                .body("'photoUrls'.size()", equalTo(5))
                .body("'photoUrls'", hasItems("MUHPq", "2", "mP", "", "fF7NnKAgKWR16UIm"))
                .body("'tags'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/user/login?username=&password=W9ZyngdXH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"));
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 7158366110914875832, " + 
                    " \"username\": \"qCRl1FK531DiLNOu\", " + 
                    " \"lastName\": \"fiPd0KwLce\", " + 
                    " \"email\": \"CPIXOf\", " + 
                    " \"password\": \"HbzHklEq\", " + 
                    " \"phone\": \"7rShSDB\" " + 
                    " }, " + 
                    " { " + 
                    " \"username\": \"ApyducjQ\", " + 
                    " \"lastName\": \"\", " + 
                    " \"email\": \"CmssS8Z5\", " + 
                    " \"password\": \"feM4p\", " + 
                    " \"userStatus\": 422 " + 
                    " }, " + 
                    " { " + 
                    " \"firstName\": \"tdvDn\", " + 
                    " \"password\": \"\", " + 
                    " \"phone\": \"OoOC7HltUgG787r\", " + 
                    " \"userStatus\": 121 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 724, " + 
                    " \"email\": \"B6QF_KqRBac\", " + 
                    " \"password\": \"nmkl__10qvQ\", " + 
                    " \"phone\": \"X\", " + 
                    " \"userStatus\": -2144167247 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 306, " + 
                    " \"firstName\": \"q0DENCTAgh8W\", " + 
                    " \"lastName\": \"o6x7Gz\", " + 
                    " \"email\": \"Skhke\", " + 
                    " \"phone\": \"9NOTIIfQGVaI\", " + 
                    " \"userStatus\": 45 " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithArray")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"category\": {}, " + 
                    " \"name\": \"jrdj1xBvlQZiB97\", " + 
                    " \"photoUrls\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("jrdj1xBvlQZiB97"))
                .body("'photoUrls'.size()", equalTo(0))
                .body("'tags'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/store/order/968")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Order not found"));
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .contentType("application/xml")
                .post(baseUrlOfSut + "/v2/pet")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(400.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("javax.xml.bind.UnmarshalException: unexpected element (uri:\"\", local:\"body\"). Expected elements are <{}Category>,<{}Pet>,<{}Tag>"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_2.extract().statusCode()));
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/v2/pet/138")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("not found"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(405).contains(res_3.extract().statusCode()));
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" [ " + 
                    " { " + 
                    " \"id\": 33, " + 
                    " \"lastName\": \"m0t\", " + 
                    " \"email\": \"0_cJ2\", " + 
                    " \"password\": \"Lkt5Du}hA3Bcyi\", " + 
                    " \"phone\": \"6Z_05\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 968, " + 
                    " \"username\": \"GN9iDWOTGMqWF\", " + 
                    " \"password\": \"\" " + 
                    " } " + 
                    " ] ")
                .post(baseUrlOfSut + "/v2/user/createWithList")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(200.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("ok"));
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/v2/pet/-2324083804238621685/uploadImage")
                .then()
                .statusCode(415)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(415.0))
                .body("'type'", containsString("unknown"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_5.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/findByTags?tags=h9KP8IJt&tags=eN2U95KAIZy")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/v2/pet/695")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(1.0))
                .body("'type'", containsString("error"))
                .body("'message'", containsString("Pet not found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .header("api_key", "")
                .delete(baseUrlOfSut + "/v2/pet/85")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/store/order/-1881366592690190989")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("Order Not Found"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/store/order/896")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("Order Not Found"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/store/order/193")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("Order Not Found"));
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/store/order/847")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'type'", containsString("unknown"))
                .body("'message'", containsString("Order Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/v2/user/7aWZ")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/:-1/v2/swagger.json")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }


}
