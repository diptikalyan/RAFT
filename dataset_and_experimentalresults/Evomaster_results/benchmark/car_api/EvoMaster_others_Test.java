import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-26T21:03:45.403932+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 3
 * <br>
 * Used time: 0h 1m 1s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "https://carapi.app";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/years?" + 
                    "year=EVW3QsXdwot0N&" + 
                    "trim=mODtf16ZL&" + 
                    "make_id=BSvCSH9A")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("BadRequestException"))
                .body("'message'", containsString("JSON search parameter value for `year` is invalid. Must be a positive number."))
                .body("'url'", containsString("/api/years?year=EVW3QsXdwot0N&amp;trim=mODtf16ZL&amp;make_id=BSvCSH9A"))
                .body("'code'", numberMatches(400.0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/vehicle-attributes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("BadRequestException"))
                .body("'message'", containsString("Attribute must be one of: bodies.type, engines.cam_type, engines.cylinders, engines.drive_type, engines.engine_type, engines.fuel_type, engines.transmission, engines.valve_timing, engines.valves"))
                .body("'url'", containsString("/api/vehicle-attributes"))
                .body("'code'", numberMatches(400.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/account/requests")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must have an account to access this endpoint"))
                .body("'url'", containsString("/api/account/requests"))
                .body("'code'", numberMatches(401.0));
        
    }


}
