import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-26T21:03:45.385529+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 6 tests
 * <br>
 * Covered targets: 16
 * <br>
 * Used time: 0h 1m 1s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "https://carapi.app";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"api_token\": \"vjl9MEaGDOOwgT\", " + 
                    " \"api_secret\": \"A3g_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/auth/login")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/trims/398")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'make_model_id'", numberMatches(70.0))
                .body("'year'", numberMatches(2023.0))
                .body("'name'", containsString("************** (hidden)"))
                .body("'description'", containsString("***************************************************************************** (hidden)"))
                .body("'msrp'", numberMatches(41500.0))
                .body("'invoice'", numberMatches(38380.0))
                .body("'created'", containsString("2022-08-30T22:19:56-04:00"))
                .body("'modified'", containsString("2022-08-30T22:19:56-04:00"))
                .body("'make_model_trim_interior_colors'.size()", equalTo(1))
                .body("'make_model_trim_interior_colors'", hasItems("... (colors hidden)"))
                .body("'make_model_trim_exterior_colors'.size()", equalTo(1))
                .body("'make_model_trim_exterior_colors'", hasItems("... (colors hidden)"))
                .body("'make_model_trim_mileage'.'make_model_trim_id'", numberMatches(398.0))
                .body("'make_model_trim_mileage'.'fuel_tank_capacity'", containsString("9.5"))
                .body("'make_model_trim_mileage'.'combined_mpg'", nullValue())
                .body("'make_model_trim_mileage'.'epa_city_mpg'", nullValue())
                .body("'make_model_trim_mileage'.'epa_highway_mpg'", nullValue())
                .body("'make_model_trim_mileage'.'range_city'", numberMatches(0.0))
                .body("'make_model_trim_mileage'.'range_highway'", numberMatches(0.0))
                .body("'make_model_trim_engine'.'make_model_trim_id'", numberMatches(398.0))
                .body("'make_model_trim_engine'.'engine_type'", containsString("*** (engine type hidden)"))
                .body("'make_model_trim_engine'.'fuel_type'", containsString("*** (fuel_type hidden)"))
                .body("'make_model_trim_engine'.'cylinders'", containsString("*** (cylinders hidden)"))
                .body("'make_model_trim_engine'.'size'", containsString("5.0"))
                .body("'make_model_trim_engine'.'horsepower_hp'", numberMatches(221.0))
                .body("'make_model_trim_engine'.'horsepower_rpm'", nullValue())
                .body("'make_model_trim_engine'.'torque_ft_lbs'", numberMatches(284.0))
                .body("'make_model_trim_engine'.'torque_rpm'", numberMatches(1300.0))
                .body("'make_model_trim_engine'.'valves'", numberMatches(12.0))
                .body("'make_model_trim_engine'.'valve_timing'", containsString("*** (valve_timing hidden)"))
                .body("'make_model_trim_engine'.'cam_type'", containsString("*** (cam_type hidden)"))
                .body("'make_model_trim_engine'.'drive_type'", containsString("*** (drive_type hidden)"))
                .body("'make_model_trim_engine'.'transmission'", containsString("*** (transmission hidden)"))
                .body("'make_model_trim_body'.'make_model_trim_id'", numberMatches(398.0))
                .body("'make_model_trim_body'.'type'", containsString("*** (body type hidden)"))
                .body("'make_model_trim_body'.'doors'", numberMatches(5.0))
                .body("'make_model_trim_body'.'length'", containsString("169.8"))
                .body("'make_model_trim_body'.'width'", containsString("71.7"))
                .body("'make_model_trim_body'.'seats'", numberMatches(5.0))
                .body("'make_model_trim_body'.'height'", containsString("61.4"))
                .body("'make_model_trim_body'.'wheel_base'", containsString("105.1"))
                .body("'make_model_trim_body'.'front_track'", nullValue())
                .body("'make_model_trim_body'.'rear_track'", nullValue())
                .body("'make_model_trim_body'.'ground_clearance'", containsString("5.8"))
                .body("'make_model_trim_body'.'cargo_capacity'", containsString("17.0"))
                .body("'make_model_trim_body'.'max_cargo_capacity'", containsString("47.0"))
                .body("'make_model_trim_body'.'curb_weight'", numberMatches(3926.0))
                .body("'make_model_trim_body'.'gross_weight'", numberMatches(5016.0))
                .body("'make_model_trim_body'.'max_payload'", numberMatches(950.0))
                .body("'make_model_trim_body'.'max_towing_capacity'", nullValue())
                .body("'make_model'.'make_id'", numberMatches(17.0))
                .body("'make_model'.'name'", containsString("********** (hidden)"))
                .body("'make_model'.'make'.'name'", containsString("MINI"))
                .body("'__message'", containsString("NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data."));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/vehicle-attributes?attribute=engines.valves")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(12))
                .body("[0]", numberMatches(8.0))
                .body("[1]", numberMatches(12.0))
                .body("[2]", numberMatches(16.0))
                ; // Skipping assertions on the remaining 9 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"api_token\": \"MY0LlLKHc\", " + 
                    " \"api_secret\": \"Ox3jzEH\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/auth/login")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/years?" + 
                    "make=pzK&" + 
                    "make_model_id=&" + 
                    "make_id=R&" + 
                    "json=PiX_v2S5h2OnC")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("BadRequestException"))
                .body("'message'", containsString("JSON search parameter must contain valid JSON."))
                .body("'url'", containsString("/api/years?make=pzK&amp;make_model_id=&amp;make_id=R&amp;json=PiX_v2S5h2OnC"))
                .body("'code'", numberMatches(400.0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/account/requests")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must have an account to access this endpoint"))
                .body("'url'", containsString("/api/account/requests"))
                .body("'code'", numberMatches(401.0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/trims/-1114751438")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("MissingRouteException"))
                .body("'message'", containsString("Not Found"))
                .body("'url'", containsString("/api/trims/-1114751438"))
                .body("'code'", numberMatches(404.0));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"api_token\": \"PZIwVJS\", " + 
                    " \"api_secret\": \"8DboTfgn\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/auth/login")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_3.extract().statusCode()));
        
        ValidatableResponse res_4 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/vin/O2RMb")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must be a subscriber to use this endpoint. You can use this VIN to test: KNDJ23AU4N7154467"))
                .body("'url'", containsString("/api/vin/O2RMb"))
                .body("'code'", numberMatches(401.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405, 500, 200).contains(res_4.extract().statusCode()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/years")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(35))
                .body("[0]", numberMatches(2024.0))
                .body("[1]", numberMatches(2023.0))
                .body("[2]", numberMatches(2022.0))
                ; // Skipping assertions on the remaining 32 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/vehicle-attributes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("BadRequestException"))
                .body("'message'", containsString("Attribute must be one of: bodies.type, engines.cam_type, engines.cylinders, engines.drive_type, engines.engine_type, engines.fuel_type, engines.transmission, engines.valve_timing, engines.valves"))
                .body("'url'", containsString("/api/vehicle-attributes"))
                .body("'code'", numberMatches(400.0));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"api_token\": \"ku\", " + 
                    " \"api_secret\": \"G\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/auth/login")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("text/html");
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200).contains(res_1.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/vin/BcmEvdpvMxCVr")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must be a subscriber to use this endpoint. You can use this VIN to test: KNDJ23AU4N7154467"))
                .body("'url'", containsString("/api/vin/BcmEvdpvMxCVr"))
                .body("'code'", numberMatches(401.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405, 500, 200).contains(res_0.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/account/requests")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must have an account to access this endpoint"))
                .body("'url'", containsString("/api/account/requests"))
                .body("'code'", numberMatches(401.0));
        
        
        ValidatableResponse res_2 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/vin/u2vtrHxiNL8_k")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must be a subscriber to use this endpoint. You can use this VIN to test: KNDJ23AU4N7154467"))
                .body("'url'", containsString("/api/vin/u2vtrHxiNL8_k"))
                .body("'code'", numberMatches(401.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405, 500, 200).contains(res_2.extract().statusCode()));
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/trims/894972700381523136")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("NotFoundException"))
                .body("'message'", containsString("Trim ID `894972700381523136` not found"))
                .body("'url'", containsString("/api/trims/894972700381523136"))
                .body("'code'", numberMatches(404.0));
        
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/vehicle-attributes")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("BadRequestException"))
                .body("'message'", containsString("Attribute must be one of: bodies.type, engines.cam_type, engines.cylinders, engines.drive_type, engines.engine_type, engines.fuel_type, engines.transmission, engines.valve_timing, engines.valves"))
                .body("'url'", containsString("/api/vehicle-attributes"))
                .body("'code'", numberMatches(400.0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/account/requests")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must have an account to access this endpoint"))
                .body("'url'", containsString("/api/account/requests"))
                .body("'code'", numberMatches(401.0));
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .get(baseUrlOfSut + "/api/vin/3N")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'exception'", containsString("UnauthenticatedException"))
                .body("'message'", containsString("You must be a subscriber to use this endpoint. You can use this VIN to test: KNDJ23AU4N7154467"))
                .body("'url'", containsString("/api/vin/3N"))
                .body("'code'", numberMatches(401.0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(400, 404, 405, 500, 200).contains(res_1.extract().statusCode()));
    }


}
