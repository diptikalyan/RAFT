import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-25T14:21:06.444235+05:30[Asia/Kolkata]
 * <br>
 * The generated test suite contains 30 tests
 * <br>
 * Covered targets: 44
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://irlverifai.sl.cloud9.ibm.com:6060/rest";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https:/countries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https:/countries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https:/countries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/region/x5n8RwEHk12JRe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/regionalbloc/pWo3wl5jOe5TfNZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/callingcode/X")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/lang/CkOpL")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https:/countries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https:/countries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https:/countries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/capital/m")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(65))
                .body("[0].'name'", containsString("Åland Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ax"))
                .body("[0].'alpha2Code'", containsString("AX"))
                .body("[0].'alpha3Code'", containsString("ALA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Mariehamn"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(28875.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.116667))
                .body("[0].'latlng'[1]", numberMatches(19.9))
                .body("[0].'demonym'", containsString("Ålandish"))
                .body("[0].'area'", numberMatches(1580.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Åland"))
                .body("[0].'numericCode'", containsString("248"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sv"))
                .body("[0].'translations'.'de'", containsString("Åland"))
                .body("[0].'translations'.'es'", containsString("Alandia"))
                .body("[0].'translations'.'fr'", containsString("Åland"))
                .body("[0].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Aland"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bahrain"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bh"))
                .body("[1].'alpha2Code'", containsString("BH"))
                .body("[1].'alpha3Code'", containsString("BHR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("973"))
                .body("[1].'capital'", containsString("Manama"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(1359800.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(26.0))
                .body("[1].'latlng'[1]", numberMatches(50.55))
                .body("[1].'demonym'", containsString("Bahraini"))
                .body("[1].'area'", numberMatches(765.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("‏البحرين"))
                .body("[1].'numericCode'", containsString("048"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BHD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ar"))
                .body("[1].'translations'.'de'", containsString("Bahrain"))
                .body("[1].'translations'.'es'", containsString("Bahrein"))
                .body("[1].'translations'.'fr'", containsString("Bahreïn"))
                .body("[1].'translations'.'ja'", containsString("バーレーン"))
                .body("[1].'translations'.'it'", containsString("Bahrein"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Belarus"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".by"))
                .body("[2].'alpha2Code'", containsString("BY"))
                .body("[2].'alpha3Code'", containsString("BLR"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("375"))
                .body("[2].'capital'", containsString("Minsk"))
                .body("[2].'altSpellings'.size()", equalTo(7))
                .body("[2].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Eastern Europe"))
                .body("[2].'population'", numberMatches(9485300.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(53.0))
                .body("[2].'latlng'[1]", numberMatches(28.0))
                .body("[2].'demonym'", containsString("Belarusian"))
                .body("[2].'area'", numberMatches(207600.0))
                .body("[2].'gini'", numberMatches(26.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[2].'nativeName'", containsString("Белару́сь"))
                .body("[2].'numericCode'", containsString("112"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("BYR"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("be", "ru"))
                .body("[2].'translations'.'de'", containsString("Weißrussland"))
                .body("[2].'translations'.'es'", containsString("Bielorrusia"))
                .body("[2].'translations'.'fr'", containsString("Biélorussie"))
                .body("[2].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[2].'translations'.'it'", containsString("Bielorussia"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 62 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha?codes=9ypa")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/region/UDe58e9u")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/lang/QH3ZrW?fields=0cNAZGaiJ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/currency/SyZBAvL1Ns")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/capital/Pa")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(57100.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("USD"))
                .body("[0].'currencies'[0].'name'", containsString("United State Dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("sm"))
                .body("[0].'languages'[1].'iso639_2'", containsString("smo"))
                .body("[0].'languages'[1].'name'", containsString("Samoan"))
                .body("[0].'languages'[1].'nativeName'", containsString("gagana fa'a Samoa"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'translations'.'br'", containsString("Samoa Americana"))
                .body("[0].'translations'.'pt'", containsString("Samoa Americana"))
                .body("[0].'translations'.'nl'", containsString("Amerikaans Samoa"))
                .body("[0].'translations'.'hr'", containsString("Američka Samoa"))
                .body("[0].'translations'.'fa'", containsString("ساموآی آمریکا"))
                .body("[0].'flag'", containsString("https:/countries.eu/data/asm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("ASA"))
                .body("[1].'name'", containsString("Belize"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bz"))
                .body("[1].'alpha2Code'", containsString("BZ"))
                .body("[1].'alpha3Code'", containsString("BLZ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("501"))
                .body("[1].'capital'", containsString("Belmopan"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("BZ"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Central America"))
                .body("[1].'population'", numberMatches(370300.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.25))
                .body("[1].'latlng'[1]", numberMatches(-88.75))
                .body("[1].'demonym'", containsString("Belizean"))
                .body("[1].'area'", numberMatches(22966.0))
                .body("[1].'gini'", numberMatches(53.1))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-06:00"))
                .body("[1].'borders'.size()", equalTo(2))
                .body("[1].'borders'", hasItems("GTM", "MEX"))
                .body("[1].'nativeName'", containsString("Belize"))
                .body("[1].'numericCode'", containsString("084"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("BZD"))
                .body("[1].'currencies'[0].'name'", containsString("Belize dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'languages'[1].'iso639_1'", containsString("es"))
                .body("[1].'languages'[1].'iso639_2'", containsString("spa"))
                .body("[1].'languages'[1].'name'", containsString("Spanish"))
                .body("[1].'languages'[1].'nativeName'", containsString("Español"))
                .body("[1].'translations'.'de'", containsString("Belize"))
                .body("[1].'translations'.'es'", containsString("Belice"))
                .body("[1].'translations'.'fr'", containsString("Belize"))
                .body("[1].'translations'.'ja'", containsString("ベリーズ"))
                .body("[1].'translations'.'it'", containsString("Belize"))
                .body("[1].'translations'.'br'", containsString("Belize"))
                .body("[1].'translations'.'pt'", containsString("Belize"))
                .body("[1].'translations'.'nl'", containsString("Belize"))
                .body("[1].'translations'.'hr'", containsString("Belize"))
                .body("[1].'translations'.'fa'", containsString("بلیز"))
                .body("[1].'flag'", containsString("https:/countries.eu/data/blz.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(2))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[1].'regionalBlocs'[1].'acronym'", containsString("CAIS"))
                .body("[1].'regionalBlocs'[1].'name'", containsString("Central American Integration System"))
                .body("[1].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[1].'otherAcronyms'", hasItems("SICA"))
                .body("[1].'regionalBlocs'[1].'otherNames'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[1].'otherNames'", hasItems("Sistema de la Integración Centroamericana,"))
                .body("[1].'cioc'", containsString("BIZ"))
                .body("[2].'name'", containsString("France"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".fr"))
                .body("[2].'alpha2Code'", containsString("FR"))
                .body("[2].'alpha3Code'", containsString("FRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("33"))
                .body("[2].'capital'", containsString("Paris"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("FR", "French Republic", "République française"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Western Europe"))
                .body("[2].'population'", numberMatches(6.671E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(46.0))
                .body("[2].'latlng'[1]", numberMatches(2.0))
                .body("[2].'demonym'", containsString("French"))
                .body("[2].'area'", numberMatches(640679.0))
                .body("[2].'gini'", numberMatches(32.7))
                .body("[2].'timezones'.size()", equalTo(12))
                .body("[2].'timezones'", hasItems("UTC-10:00", "UTC-09:30", "UTC-09:00", "UTC-08:00", "UTC-04:00", "UTC-03:00", "UTC+01:00", "UTC+03:00", "UTC+04:00", "UTC+05:00", "UTC+11:00", "UTC+12:00"))
                .body("[2].'borders'.size()", equalTo(8))
                .body("[2].'borders'", hasItems("AND", "BEL", "DEU", "ITA", "LUX", "MCO", "ESP", "CHE"))
                .body("[2].'nativeName'", containsString("France"))
                .body("[2].'numericCode'", containsString("250"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("EUR"))
                .body("[2].'currencies'[0].'name'", containsString("Euro"))
                .body("[2].'currencies'[0].'symbol'", containsString("€"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[2].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[2].'languages'[0].'name'", containsString("French"))
                .body("[2].'languages'[0].'nativeName'", containsString("français"))
                .body("[2].'translations'.'de'", containsString("Frankreich"))
                .body("[2].'translations'.'es'", containsString("Francia"))
                .body("[2].'translations'.'fr'", containsString("France"))
                .body("[2].'translations'.'ja'", containsString("フランス"))
                .body("[2].'translations'.'it'", containsString("Francia"))
                .body("[2].'translations'.'br'", containsString("França"))
                .body("[2].'translations'.'pt'", containsString("França"))
                .body("[2].'translations'.'nl'", containsString("Frankrijk"))
                .body("[2].'translations'.'hr'", containsString("Francuska"))
                .body("[2].'translations'.'fa'", containsString("فرانسه"))
                .body("[2].'flag'", containsString("https:/countries.eu/data/fra.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("FRA"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/lang/qy")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha?codes=F9F")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/region/z81AJ59_cxmyHaz?fields=zOllLcMVEcZxmM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/demonym/uP8lCaMe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/alpha/gF?fields=cqT9K0MK8DB2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/name/Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(33))
                .body("[0].'name'", containsString("Equatorial Guinea"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gq"))
                .body("[0].'alpha2Code'", containsString("GQ"))
                .body("[0].'alpha3Code'", containsString("GNQ"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("240"))
                .body("[0].'capital'", containsString("Malabo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("GQ", "Republic of Equatorial Guinea", "República de Guinea Ecuatorial", "République de Guinée équatoriale", "República da Guiné Equatorial"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Middle Africa"))
                .body("[0].'population'", numberMatches(1222442.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(2.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Equatorial Guinean"))
                .body("[0].'area'", numberMatches(28051.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CMR", "GAB"))
                .body("[0].'nativeName'", containsString("Guinea Ecuatorial"))
                .body("[0].'numericCode'", containsString("226"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XAF"))
                .body("[0].'currencies'[0].'name'", containsString("Central African CFA franc"))
                .body("[0].'currencies'[0].'symbol'", containsString("Fr"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("fr"))
                .body("[0].'languages'[1].'iso639_2'", containsString("fra"))
                .body("[0].'languages'[1].'name'", containsString("French"))
                .body("[0].'languages'[1].'nativeName'", containsString("français"))
                .body("[0].'translations'.'de'", containsString("Äquatorial-Guinea"))
                .body("[0].'translations'.'es'", containsString("Guinea Ecuatorial"))
                .body("[0].'translations'.'fr'", containsString("Guinée-Équatoriale"))
                .body("[0].'translations'.'ja'", containsString("赤道ギニア"))
                .body("[0].'translations'.'it'", containsString("Guinea Equatoriale"))
                .body("[0].'translations'.'br'", containsString("Guiné Equatorial"))
                .body("[0].'translations'.'pt'", containsString("Guiné Equatorial"))
                .body("[0].'translations'.'nl'", containsString("Equatoriaal-Guinea"))
                .body("[0].'translations'.'hr'", containsString("Ekvatorijalna Gvineja"))
                .body("[0].'translations'.'fa'", containsString("گینه استوایی"))
                .body("[0].'flag'", containsString("https:/countries.eu/data/gnq.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("GEQ"))
                .body("[1].'name'", containsString("Iraq"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".iq"))
                .body("[1].'alpha2Code'", containsString("IQ"))
                .body("[1].'alpha3Code'", containsString("IRQ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("964"))
                .body("[1].'capital'", containsString("Baghdad"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("IQ", "Republic of Iraq", "Jumhūriyyat al-‘Irāq"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(3.7883543E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(33.0))
                .body("[1].'latlng'[1]", numberMatches(44.0))
                .body("[1].'demonym'", containsString("Iraqi"))
                .body("[1].'area'", numberMatches(438317.0))
                .body("[1].'gini'", numberMatches(30.9))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("IRN", "JOR", "KWT", "SAU", "SYR", "TUR"))
                .body("[1].'nativeName'", containsString("العراق"))
                .body("[1].'numericCode'", containsString("368"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("IQD"))
                .body("[1].'currencies'[0].'name'", containsString("Iraqi dinar"))
                .body("[1].'currencies'[0].'symbol'", containsString("ع.د"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[1].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[1].'languages'[0].'name'", containsString("Arabic"))
                .body("[1].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[1].'languages'[1].'iso639_1'", containsString("ku"))
                .body("[1].'languages'[1].'iso639_2'", containsString("kur"))
                .body("[1].'languages'[1].'name'", containsString("Kurdish"))
                .body("[1].'languages'[1].'nativeName'", containsString("Kurdî"))
                .body("[1].'translations'.'de'", containsString("Irak"))
                .body("[1].'translations'.'es'", containsString("Irak"))
                .body("[1].'translations'.'fr'", containsString("Irak"))
                .body("[1].'translations'.'ja'", containsString("イラク"))
                .body("[1].'translations'.'it'", containsString("Iraq"))
                .body("[1].'translations'.'br'", containsString("Iraque"))
                .body("[1].'translations'.'pt'", containsString("Iraque"))
                .body("[1].'translations'.'nl'", containsString("Irak"))
                .body("[1].'translations'.'hr'", containsString("Irak"))
                .body("[1].'translations'.'fa'", containsString("عراق"))
                .body("[1].'flag'", containsString("https:/countries.eu/data/irq.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AL"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Arab League"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[1].'cioc'", containsString("IRQ"))
                .body("[2].'name'", containsString("Martinique"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".mq"))
                .body("[2].'alpha2Code'", containsString("MQ"))
                .body("[2].'alpha3Code'", containsString("MTQ"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("596"))
                .body("[2].'capital'", containsString("Fort-de-France"))
                .body("[2].'altSpellings'.size()", equalTo(1))
                .body("[2].'altSpellings'", hasItems("MQ"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("Caribbean"))
                .body("[2].'population'", numberMatches(378243.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(14.666667))
                .body("[2].'latlng'[1]", numberMatches(-61.0))
                .body("[2].'demonym'", containsString("French"))
                .body("[2].'area'", nullValue())
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-04:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Martinique"))
                .body("[2].'numericCode'", containsString("474"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("EUR"))
                .body("[2].'currencies'[0].'name'", containsString("Euro"))
                .body("[2].'currencies'[0].'symbol'", containsString("€"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("fr"))
                .body("[2].'languages'[0].'iso639_2'", containsString("fra"))
                .body("[2].'languages'[0].'name'", containsString("French"))
                .body("[2].'languages'[0].'nativeName'", containsString("français"))
                .body("[2].'translations'.'de'", containsString("Martinique"))
                .body("[2].'translations'.'es'", containsString("Martinica"))
                .body("[2].'translations'.'fr'", containsString("Martinique"))
                .body("[2].'translations'.'ja'", containsString("マルティニーク"))
                .body("[2].'translations'.'it'", containsString("Martinica"))
                .body("[2].'translations'.'br'", containsString("Martinica"))
                .body("[2].'translations'.'pt'", containsString("Martinica"))
                .body("[2].'translations'.'nl'", containsString("Martinique"))
                .body("[2].'translations'.'hr'", containsString("Martinique"))
                .body("[2].'translations'.'fa'", containsString("مونتسرات"))
                .body("[2].'flag'", containsString("https:/countries.eu/data/mtq.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(0))
                .body("[2].'cioc'", containsString(""))
                ; // Skipping assertions on the remaining 30 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha?codes=geCFQOzzhrDmZlbB")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/capital/sysWZQRqmKjvt")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/name/p?fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(146))
                .body("[0].'name'", containsString("Cape Verde"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cv"))
                .body("[0].'alpha2Code'", containsString("CV"))
                .body("[0].'alpha3Code'", containsString("CPV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("238"))
                .body("[0].'capital'", containsString("Praia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CV", "Republic of Cabo Verde", "República de Cabo Verde"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(524833.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.0))
                .body("[0].'latlng'[1]", numberMatches(-24.0))
                .body("[0].'demonym'", containsString("Cape Verdian"))
                .body("[0].'area'", numberMatches(4033.0))
                .body("[0].'gini'", numberMatches(50.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-01:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Cabo Verde"))
                .body("[0].'numericCode'", containsString("132"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CVE"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Kap Verde"))
                .body("[0].'translations'.'es'", containsString("Cabo Verde"))
                .body("[0].'translations'.'fr'", containsString("Cap Vert"))
                .body("[0].'translations'.'ja'", containsString("カーボベルデ"))
                .body("[0].'translations'.'it'", containsString("Capo Verde"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Central African Republic"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".cf"))
                .body("[1].'alpha2Code'", containsString("CF"))
                .body("[1].'alpha3Code'", containsString("CAF"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("236"))
                .body("[1].'capital'", containsString("Bangui"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("CF", "Central African Republic", "République centrafricaine"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(4900000.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(7.0))
                .body("[1].'latlng'[1]", numberMatches(21.0))
                .body("[1].'demonym'", containsString("Central African"))
                .body("[1].'area'", numberMatches(622984.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(6))
                .body("[1].'borders'", hasItems("CMR", "TCD", "COD", "COG", "SSD", "SDN"))
                .body("[1].'nativeName'", containsString("Ködörösêse tî Bêafrîka"))
                .body("[1].'numericCode'", containsString("140"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("XAF"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("fr", "sg"))
                .body("[1].'translations'.'de'", containsString("Zentralafrikanische Republik"))
                .body("[1].'translations'.'es'", containsString("República Centroafricana"))
                .body("[1].'translations'.'fr'", containsString("République centrafricaine"))
                .body("[1].'translations'.'ja'", containsString("中央アフリカ共和国"))
                .body("[1].'translations'.'it'", containsString("Repubblica Centrafricana"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Republic of the Congo"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cg"))
                .body("[2].'alpha2Code'", containsString("CG"))
                .body("[2].'alpha3Code'", containsString("COG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("242"))
                .body("[2].'capital'", containsString("Brazzaville"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("CG", "Congo-Brazzaville"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(4620000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-1.0))
                .body("[2].'latlng'[1]", numberMatches(15.0))
                .body("[2].'demonym'", containsString("Congolese"))
                .body("[2].'area'", numberMatches(342000.0))
                .body("[2].'gini'", numberMatches(47.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("AGO", "CMR", "CAF", "COD", "GAB"))
                .body("[2].'nativeName'", containsString("République du Congo"))
                .body("[2].'numericCode'", containsString("178"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XAF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ln"))
                .body("[2].'translations'.'de'", containsString("Kongo"))
                .body("[2].'translations'.'es'", containsString("Congo"))
                .body("[2].'translations'.'fr'", containsString("Congo"))
                .body("[2].'translations'.'ja'", containsString("コンゴ共和国"))
                .body("[2].'translations'.'it'", containsString("Congo"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 143 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/currency/46kx9suLUWW?fields=2YeK6v9")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/regionalbloc/TDOZhOXh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/subregion/5tj")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/subregion/5bB1OsWRI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/region/zUQ?fields=lJ7t")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/alpha/ei5JlN?fields=2w")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/subregion/RUUX?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/lang/Hi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Fiji"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".fj"))
                .body("[0].'alpha2Code'", containsString("FJ"))
                .body("[0].'alpha3Code'", containsString("FJI"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("679"))
                .body("[0].'capital'", containsString("Suva"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("FJ", "Viti", "Republic of Fiji", "Matanitu ko Viti", "Fijī Gaṇarājya"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(859178.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-18.0))
                .body("[0].'latlng'[1]", numberMatches(175.0))
                .body("[0].'demonym'", containsString("Fijian"))
                .body("[0].'area'", numberMatches(18272.0))
                .body("[0].'gini'", numberMatches(42.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Fiji"))
                .body("[0].'numericCode'", containsString("242"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("FJD"))
                .body("[0].'languages'.size()", equalTo(4))
                .body("[0].'languages'", hasItems("en", "fj", "hi", "ur"))
                .body("[0].'translations'.'de'", containsString("Fidschi"))
                .body("[0].'translations'.'es'", containsString("Fiyi"))
                .body("[0].'translations'.'fr'", containsString("Fidji"))
                .body("[0].'translations'.'ja'", containsString("フィジー"))
                .body("[0].'translations'.'it'", containsString("Figi"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("India"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".in"))
                .body("[1].'alpha2Code'", containsString("IN"))
                .body("[1].'alpha3Code'", containsString("IND"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("91"))
                .body("[1].'capital'", containsString("New Delhi"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("IN", "Bhārat", "Republic of India", "Bharat Ganrajya"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Southern Asia"))
                .body("[1].'population'", numberMatches(1.27584E9))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(20.0))
                .body("[1].'latlng'[1]", numberMatches(77.0))
                .body("[1].'demonym'", containsString("Indian"))
                .body("[1].'area'", numberMatches(3287590.0))
                .body("[1].'gini'", numberMatches(33.4))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+05:30"))
                .body("[1].'borders'.size()", equalTo(8))
                .body("[1].'borders'", hasItems("AFG", "BGD", "BTN", "MMR", "CHN", "NPL", "PAK", "LKA"))
                .body("[1].'nativeName'", containsString("भारत"))
                .body("[1].'numericCode'", containsString("356"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("INR"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("hi", "en"))
                .body("[1].'translations'.'de'", containsString("Indien"))
                .body("[1].'translations'.'es'", containsString("India"))
                .body("[1].'translations'.'fr'", containsString("Inde"))
                .body("[1].'translations'.'ja'", containsString("インド"))
                .body("[1].'translations'.'it'", containsString("India"))
                .body("[1].'relevance'", containsString("3"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/capital/eNq2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha/aO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Angola"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".ao"))
                .body("'alpha2Code'", containsString("AO"))
                .body("'alpha3Code'", containsString("AGO"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("244"))
                .body("'capital'", containsString("Luanda"))
                .body("'altSpellings'.size()", equalTo(3))
                .body("'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("'region'", containsString("Africa"))
                .body("'subregion'", containsString("Middle Africa"))
                .body("'population'", numberMatches(2.4383301E7))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(-12.5))
                .body("'latlng'[1]", numberMatches(18.5))
                .body("'demonym'", containsString("Angolan"))
                .body("'area'", numberMatches(1246700.0))
                .body("'gini'", numberMatches(58.6))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+01:00"))
                .body("'borders'.size()", equalTo(4))
                .body("'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("'nativeName'", containsString("Angola"))
                .body("'numericCode'", containsString("024"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("AOA"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'", hasItems("pt"))
                .body("'translations'.'de'", containsString("Angola"))
                .body("'translations'.'es'", containsString("Angola"))
                .body("'translations'.'fr'", containsString("Angola"))
                .body("'translations'.'ja'", containsString("アンゴラ"))
                .body("'translations'.'it'", containsString("Angola"))
                .body("'relevance'", containsString("0"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/callingcode/T")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/lang/FFjHImPV")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/subregion/0o?fields=R6viOH2d1Ugav")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/demonym/wIZDY7WJb8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/lang/TifiVpQEnTRWP")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/name/xTTIMECaO?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/capital/9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/currency/FG5lXQ4t")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha?codes=fYwKs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/currency/m94f3FA?fields=UDOFSc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/name/P?fullText=true")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha/UEE4V0vLwo4")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/alpha/cENA0DCqL3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/callingcode/oa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/name/sswwktkrf?fields=ruOao30PmN5Cr")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/alpha?" + 
                    "fields=poX_1ur7nq_a&" + 
                    "codes=C2CR77Q1xde")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha?codes=bLPQGnFqOQ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/callingcode/KijyiZznEKY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/currency/0qZwMcCX6IKMu")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha/BA8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/demonym/RcAgqvoxG4Pb0P?fields=plB08B")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/region/cp1?fields=i4xxr74yjsN")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/currency/ADJ?fields=idBSmlmUK")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/currency/93PKRSVe0MFIDY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/alpha/bsmQPQWGL8NJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/currency/V4G")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/currency/pK4DTLNjqn3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/currency/ch16KrMj?fields=QHV9R1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/alpha/vDUaZMzatuzF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/currency/Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/demonym/43blLoCC?fields=RufFJufoeIQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/callingcode/bG2RaR7Y2ErrbRIY")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/region/FNmzz5OSx_0FHz1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/capital/d2GkF")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/subregion/KrQIoN9kEuU")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/region/SbFiuVt_9OsOyfE")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/demonym/UCjUVPiFcX?fields=E9X7FWk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/subregion/7TV?fields=zcxpZ1t")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/name/IjYuX6Gswl8g_?fullText=false")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/lang/p6FxJ4yw89ZhVOw?fields=DbhHSu13jKtx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/alpha/LgB?fields=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v1/region/0rXg3gFTNb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/capital/cfJt6Pvv")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
        
    }


}
